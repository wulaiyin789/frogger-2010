
CSSE2010-s4411500.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000025b4  00002648  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000152  00800162  00800162  000026aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b72  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015f7  00000000  00000000  00006702  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023d6  00000000  00000000  00007cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba0  00000000  00000000  0000a0d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010eb  00000000  00000000  0000ac70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024d4  00000000  00000000  0000bd5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000e22f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 01 	jmp	0x26a	; 0x26a <__ctors_end>
       4:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
       8:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
       c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      10:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      14:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_5>
      18:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      1c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      20:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      24:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      28:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      2c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      30:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      34:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      38:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      3c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      40:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__vector_16>
      44:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      48:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      4c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      50:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__vector_20>
      54:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_21>
      58:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      5c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      60:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      64:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      68:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      6c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      70:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      74:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      78:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
      7c:	4a 03       	fmul	r20, r18
      7e:	fd 02       	muls	r31, r29
      80:	fd 02       	muls	r31, r29
      82:	fd 02       	muls	r31, r29
      84:	4a 03       	fmul	r20, r18
      86:	1d 03       	fmul	r17, r21
      88:	1d 03       	fmul	r17, r21
      8a:	3d 03       	fmul	r19, r21
      8c:	bc 04       	cpc	r11, r12
      8e:	bf 04       	cpc	r11, r15
      90:	bf 04       	cpc	r11, r15
      92:	bf 04       	cpc	r11, r15
      94:	bc 04       	cpc	r11, r12
      96:	c3 04       	cpc	r12, r3
      98:	c3 04       	cpc	r12, r3
      9a:	c7 04       	cpc	r12, r7

0000009c <__trampolines_end>:
      9c:	4c 69       	ori	r20, 0x9C	; 156
      9e:	76 65       	ori	r23, 0x56	; 86
      a0:	73 3a       	cpi	r23, 0xA3	; 163
      a2:	25 31       	cpi	r18, 0x15	; 21
      a4:	30 64       	ori	r19, 0x40	; 64
	...

000000a7 <__c.2380>:
      a7:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      b7:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000c5 <__c.2378>:
      c5:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000cf <__c.2370>:
      cf:	53 63 6f 72 65 3a 25 31 30 64 00                    Score:%10d.

000000da <__c.2368>:
      da:	4c 69 76 65 73 3a 25 31 30 64 00                    Lives:%10d.

000000e5 <__c.2366>:
      e5:	4c 65 76 65 6c 3a 25 31 30 64 00                    Level:%10d.

000000f0 <__c.2358>:
      f0:	47 41 4d 45 20 50 41 55 53 45 44 00                 GAME PAUSED.

000000fc <__c.2356>:
      fc:	4c 65 76 65 6c 3a 25 31 30 64 00                    Level:%10d.

00000107 <__c.2354>:
     107:	4c 69 76 65 73 3a 25 31 30 64 00                    Lives:%10d.

00000112 <__c.2352>:
     112:	53 63 6f 72 65 3a 25 31 30 64 00                    Score:%10d.

0000011d <__c.2335>:
     11d:	4c 65 76 65 6c 3a 25 31 30 64 00                    Level:%10d.

00000128 <__c.2333>:
     128:	4c 69 76 65 73 3a 25 31 30 64 00                    Lives:%10d.

00000133 <__c.2331>:
     133:	53 63 6f 72 65 3a 25 31 30 64 00                    Score:%10d.

0000013e <__c.2322>:
     13e:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     14e:	6f 6a 65 63 74 20 62 79 20 57 75 20 4c 61 69 20     oject by Wu Lai 
     15e:	59 69 6e 20 34 34 31 31 35 30 30 31 00              Yin 44115001.

0000016b <__c.2320>:
     16b:	46 72 6f 67 67 65 72 00                             Frogger.

00000173 <__c.2036>:
     173:	53 63 6f 72 65 3a 25 31 30 64 00                    Score:%10d.

0000017e <numbers>:
     17e:	e9 01 e6 01 e2 01 de 01 da 01 d6 01 d2 01 ce 01     ................
     18e:	ca 01 c6 01                                         ....

00000192 <letters>:
     192:	58 02 54 02 50 02 4c 02 48 02 44 02 40 02 3c 02     X.T.P.L.H.D.@.<.
     1a2:	39 02 35 02 31 02 2d 02 28 02 24 02 20 02 1c 02     9.5.1.-.(.$. ...
     1b2:	17 02 13 02 0f 02 0a 02 06 02 01 02 fc 01 f7 01     ................
     1c2:	f2 01 ed 01                                         ....

000001c6 <cols_9>:
     1c6:	64 92 92 7d                                         d..}

000001ca <cols_8>:
     1ca:	6c 92 92 6d                                         l..m

000001ce <cols_7>:
     1ce:	80 9e a0 c1                                         ....

000001d2 <cols_6>:
     1d2:	7c 92 92 4d                                         |..M

000001d6 <cols_5>:
     1d6:	e4 a2 a2 9d                                         ....

000001da <cols_4>:
     1da:	18 28 48 ff                                         .(H.

000001de <cols_3>:
     1de:	44 92 92 6d                                         D..m

000001e2 <cols_2>:
     1e2:	46 8a 92 63                                         F..c

000001e6 <cols_1>:
     1e6:	42 fe 03                                            B..

000001e9 <cols_0>:
     1e9:	7c 92 a2 7d                                         |..}

000001ed <cols_Z>:
     1ed:	86 8a 92 a2 c3                                      .....

000001f2 <cols_Y>:
     1f2:	e0 10 0e 10 e1                                      .....

000001f7 <cols_X>:
     1f7:	c6 28 10 28 c7                                      .(.(.

000001fc <cols_W>:
     1fc:	fc 02 1c 02 fd                                      .....

00000201 <cols_V>:
     201:	f8 04 02 04 f9                                      .....

00000206 <cols_U>:
     206:	fc 02 02 fd                                         ....

0000020a <cols_T>:
     20a:	80 80 fe 80 81                                      .....

0000020f <cols_S>:
     20f:	64 92 92 4d                                         d..M

00000213 <cols_R>:
     213:	fe 90 98 67                                         ...g

00000217 <cols_Q>:
     217:	7c 82 8a 7c 03                                      |..|.

0000021c <cols_P>:
     21c:	fe 90 90 61                                         ...a

00000220 <cols_O>:
     220:	7c 82 82 7d                                         |..}

00000224 <cols_N>:
     224:	fe 20 10 ff                                         . ..

00000228 <cols_M>:
     228:	fe 40 30 40 ff                                      .@0@.

0000022d <cols_L>:
     22d:	fe 02 02 03                                         ....

00000231 <cols_K>:
     231:	fe 10 28 c7                                         ..(.

00000235 <cols_J>:
     235:	04 02 02 fd                                         ....

00000239 <cols_I>:
     239:	82 fe 83                                            ...

0000023c <cols_H>:
     23c:	fe 10 10 ff                                         ....

00000240 <cols_G>:
     240:	7c 82 92 5d                                         |..]

00000244 <cols_F>:
     244:	fe 90 90 81                                         ....

00000248 <cols_E>:
     248:	fe 92 92 83                                         ....

0000024c <cols_D>:
     24c:	fe 82 82 7d                                         ...}

00000250 <cols_C>:
     250:	7c 82 82 45                                         |..E

00000254 <cols_B>:
     254:	fe 92 92 6d                                         ...m

00000258 <cols_A>:
     258:	7e 90 90 7f                                         ~...

0000025c <__c.2042>:
     25c:	1b 5b 32 4a 00                                      .[2J.

00000261 <__c.2027>:
     261:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d8 e0       	ldi	r29, 0x08	; 8
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	e4 eb       	ldi	r30, 0xB4	; 180
     27e:	f5 e2       	ldi	r31, 0x25	; 37
     280:	02 c0       	rjmp	.+4      	; 0x286 <__do_copy_data+0x10>
     282:	05 90       	lpm	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	a2 36       	cpi	r26, 0x62	; 98
     288:	b1 07       	cpc	r27, r17
     28a:	d9 f7       	brne	.-10     	; 0x282 <__do_copy_data+0xc>

0000028c <__do_clear_bss>:
     28c:	22 e0       	ldi	r18, 0x02	; 2
     28e:	a2 e6       	ldi	r26, 0x62	; 98
     290:	b1 e0       	ldi	r27, 0x01	; 1
     292:	01 c0       	rjmp	.+2      	; 0x296 <.do_clear_bss_start>

00000294 <.do_clear_bss_loop>:
     294:	1d 92       	st	X+, r1

00000296 <.do_clear_bss_start>:
     296:	a4 3b       	cpi	r26, 0xB4	; 180
     298:	b2 07       	cpc	r27, r18
     29a:	e1 f7       	brne	.-8      	; 0x294 <.do_clear_bss_loop>
     29c:	0e 94 3d 0b 	call	0x167a	; 0x167a <main>
     2a0:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <_exit>

000002a4 <__bad_interrupt>:
     2a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002a8 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 91)
	PCICR |= (1<<PCIE1);
     2a8:	e8 e6       	ldi	r30, 0x68	; 104
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 81       	ld	r24, Z
     2ae:	82 60       	ori	r24, 0x02	; 2
     2b0:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 92)
	PCIFR |= (1<<PCIF1);
     2b2:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     2b4:	ec e6       	ldi	r30, 0x6C	; 108
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	8f 60       	ori	r24, 0x0F	; 15
     2bc:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     2be:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <queue_length>
     2c2:	08 95       	ret

000002c4 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     2c4:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <queue_length>
     2c8:	18 16       	cp	r1, r24
     2ca:	3c f5       	brge	.+78     	; 0x31a <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     2cc:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     2d0:	6f b7       	in	r22, 0x3f	; 63
		cli();
     2d2:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2d4:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <queue_length>
     2d8:	92 30       	cpi	r25, 0x02	; 2
     2da:	b4 f0       	brlt	.+44     	; 0x308 <button_pushed+0x44>
     2dc:	21 e0       	ldi	r18, 0x01	; 1
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     2e2:	f9 01       	movw	r30, r18
     2e4:	e9 59       	subi	r30, 0x99	; 153
     2e6:	fe 4f       	sbci	r31, 0xFE	; 254
     2e8:	40 81       	ld	r20, Z
     2ea:	f9 01       	movw	r30, r18
     2ec:	ea 59       	subi	r30, 0x9A	; 154
     2ee:	fe 4f       	sbci	r31, 0xFE	; 254
     2f0:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2f2:	9f 5f       	subi	r25, 0xFF	; 255
     2f4:	29 2f       	mov	r18, r25
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <queue_length>
     2fc:	04 2e       	mov	r0, r20
     2fe:	00 0c       	add	r0, r0
     300:	55 0b       	sbc	r21, r21
     302:	24 17       	cp	r18, r20
     304:	35 07       	cpc	r19, r21
     306:	6c f3       	brlt	.-38     	; 0x2e2 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     308:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <queue_length>
     30c:	91 50       	subi	r25, 0x01	; 1
     30e:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <queue_length>
		
		if(interrupts_were_enabled) {
     312:	66 23       	and	r22, r22
     314:	1c f4       	brge	.+6      	; 0x31c <button_pushed+0x58>
			// Turn them back on again
			sei();
     316:	78 94       	sei
     318:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     31a:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     31c:	08 95       	ret

0000031e <can_button_repeat>:

int8_t can_button_repeat(void) {
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
	if (button_repeat == 0) {
     326:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end>
     32a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x1>
     32e:	a0 91 64 01 	lds	r26, 0x0164	; 0x800164 <__data_end+0x2>
     332:	b0 91 65 01 	lds	r27, 0x0165	; 0x800165 <__data_end+0x3>
     336:	89 2b       	or	r24, r25
     338:	8a 2b       	or	r24, r26
     33a:	8b 2b       	or	r24, r27
     33c:	09 f4       	brne	.+2      	; 0x340 <can_button_repeat+0x22>
     33e:	89 c0       	rjmp	.+274    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
     340:	df b7       	in	r29, 0x3f	; 63
     342:	d0 78       	andi	r29, 0x80	; 128
	cli();
     344:	f8 94       	cli
	
	int8_t return_value = -1;
	
	uint8_t button_state = PINB & 0x0F;
     346:	c3 b1       	in	r28, 0x03	; 3
     348:	cf 70       	andi	r28, 0x0F	; 15
	
	if (get_current_time() > button_repeat && button_state == last_button_state) {
     34a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     34e:	00 91 62 01 	lds	r16, 0x0162	; 0x800162 <__data_end>
     352:	10 91 63 01 	lds	r17, 0x0163	; 0x800163 <__data_end+0x1>
     356:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <__data_end+0x2>
     35a:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <__data_end+0x3>
     35e:	06 17       	cp	r16, r22
     360:	17 07       	cpc	r17, r23
     362:	28 07       	cpc	r18, r24
     364:	39 07       	cpc	r19, r25
     366:	08 f0       	brcs	.+2      	; 0x36a <can_button_repeat+0x4c>
     368:	61 c0       	rjmp	.+194    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     36a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <last_button_state>
     36e:	c8 13       	cpse	r28, r24
     370:	5d c0       	rjmp	.+186    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

		switch (button_state) {
     372:	c2 30       	cpi	r28, 0x02	; 2
     374:	d9 f0       	breq	.+54     	; 0x3ac <can_button_repeat+0x8e>
     376:	18 f4       	brcc	.+6      	; 0x37e <can_button_repeat+0x60>
     378:	c1 30       	cpi	r28, 0x01	; 1
     37a:	31 f0       	breq	.+12     	; 0x388 <can_button_repeat+0x6a>
     37c:	4d c0       	rjmp	.+154    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     37e:	c4 30       	cpi	r28, 0x04	; 4
     380:	39 f1       	breq	.+78     	; 0x3d0 <can_button_repeat+0xb2>
     382:	c8 30       	cpi	r28, 0x08	; 8
     384:	b9 f1       	breq	.+110    	; 0x3f4 <can_button_repeat+0xd6>
     386:	48 c0       	rjmp	.+144    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			case BUTTON_B0:
				button_repeat = get_current_time() + REPEAT_DELAY;
     388:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     38c:	dc 01       	movw	r26, r24
     38e:	cb 01       	movw	r24, r22
     390:	80 57       	subi	r24, 0x70	; 112
     392:	9e 4f       	sbci	r25, 0xFE	; 254
     394:	af 4f       	sbci	r26, 0xFF	; 255
     396:	bf 4f       	sbci	r27, 0xFF	; 255
     398:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     39c:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     3a0:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     3a4:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
				return_value = 0;
     3a8:	80 e0       	ldi	r24, 0x00	; 0
				break;
     3aa:	4f c0       	rjmp	.+158    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			case BUTTON_B1:
				button_repeat = get_current_time() + REPEAT_DELAY;
     3ac:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	80 57       	subi	r24, 0x70	; 112
     3b6:	9e 4f       	sbci	r25, 0xFE	; 254
     3b8:	af 4f       	sbci	r26, 0xFF	; 255
     3ba:	bf 4f       	sbci	r27, 0xFF	; 255
     3bc:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     3c0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     3c4:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     3c8:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
				return_value = 1;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
				break;
     3ce:	3d c0       	rjmp	.+122    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			case BUTTON_B2:
				button_repeat = get_current_time() + REPEAT_DELAY;
     3d0:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     3d4:	dc 01       	movw	r26, r24
     3d6:	cb 01       	movw	r24, r22
     3d8:	80 57       	subi	r24, 0x70	; 112
     3da:	9e 4f       	sbci	r25, 0xFE	; 254
     3dc:	af 4f       	sbci	r26, 0xFF	; 255
     3de:	bf 4f       	sbci	r27, 0xFF	; 255
     3e0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     3e4:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     3e8:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     3ec:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
				return_value = 2;
     3f0:	82 e0       	ldi	r24, 0x02	; 2
				break;
     3f2:	2b c0       	rjmp	.+86     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			case BUTTON_B3:
				button_repeat = get_current_time() + REPEAT_DELAY;
     3f4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	80 57       	subi	r24, 0x70	; 112
     3fe:	9e 4f       	sbci	r25, 0xFE	; 254
     400:	af 4f       	sbci	r26, 0xFF	; 255
     402:	bf 4f       	sbci	r27, 0xFF	; 255
     404:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     408:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     40c:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     410:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
				return_value = 3;
     414:	83 e0       	ldi	r24, 0x03	; 3
				break;
     416:	19 c0       	rjmp	.+50     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			default:
				button_repeat = 0;
     418:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
     41c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     420:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <__data_end+0x2>
     424:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <__data_end+0x3>
	 * of the value.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
	cli();
	
	int8_t return_value = -1;
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	0f c0       	rjmp	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				return_value = 3;
				break;
			default:
				button_repeat = 0;
		}
	} else if (button_state != last_button_state) {
     42c:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <last_button_state>
     430:	c8 17       	cp	r28, r24
     432:	51 f0       	breq	.+20     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		button_repeat = 0;
     434:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
     438:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     43c:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <__data_end+0x2>
     440:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <__data_end+0x3>
	 * of the value.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
	cli();
	
	int8_t return_value = -1;
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	01 c0       	rjmp	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	8f ef       	ldi	r24, 0xFF	; 255
		}
	} else if (button_state != last_button_state) {
		button_repeat = 0;
	}
	
	if(interruptsOn) {
     44a:	dd 23       	and	r29, r29
     44c:	19 f0       	breq	.+6      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		sei();
     44e:	78 94       	sei
     450:	01 c0       	rjmp	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	return return_value;
}

int8_t can_button_repeat(void) {
	if (button_repeat == 0) {
		return -1;
     452:	8f ef       	ldi	r24, 0xFF	; 255
	if(interruptsOn) {
		sei();
	}
	return return_value;
	
}
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	08 95       	ret

0000045e <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	2f 93       	push	r18
     46a:	3f 93       	push	r19
     46c:	4f 93       	push	r20
     46e:	5f 93       	push	r21
     470:	6f 93       	push	r22
     472:	7f 93       	push	r23
     474:	8f 93       	push	r24
     476:	9f 93       	push	r25
     478:	af 93       	push	r26
     47a:	bf 93       	push	r27
     47c:	cf 93       	push	r28
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     482:	c3 b1       	in	r28, 0x03	; 3
     484:	cf 70       	andi	r28, 0x0F	; 15
	
	if(queue_length < BUTTON_QUEUE_SIZE) {
     486:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <queue_length>
     48a:	84 30       	cpi	r24, 0x04	; 4
     48c:	0c f0       	brlt	.+2      	; 0x490 <__vector_5+0x32>
     48e:	8c c0       	rjmp	.+280    	; 0x5a8 <__vector_5+0x14a>
		switch (button_state) {
     490:	c2 30       	cpi	r28, 0x02	; 2
     492:	41 f1       	breq	.+80     	; 0x4e4 <__vector_5+0x86>
     494:	18 f4       	brcc	.+6      	; 0x49c <__vector_5+0x3e>
     496:	c1 30       	cpi	r28, 0x01	; 1
     498:	41 f0       	breq	.+16     	; 0x4aa <__vector_5+0x4c>
     49a:	7e c0       	rjmp	.+252    	; 0x598 <__vector_5+0x13a>
     49c:	c4 30       	cpi	r28, 0x04	; 4
     49e:	09 f4       	brne	.+2      	; 0x4a2 <__vector_5+0x44>
     4a0:	3f c0       	rjmp	.+126    	; 0x520 <__vector_5+0xc2>
     4a2:	c8 30       	cpi	r28, 0x08	; 8
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__vector_5+0x4a>
     4a6:	5a c0       	rjmp	.+180    	; 0x55c <__vector_5+0xfe>
     4a8:	77 c0       	rjmp	.+238    	; 0x598 <__vector_5+0x13a>
			case BUTTON_B0:
				button_queue[queue_length++] = 0;
     4aa:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <queue_length>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	8e 0f       	add	r24, r30
     4b2:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <queue_length>
     4b6:	0e 2e       	mov	r0, r30
     4b8:	00 0c       	add	r0, r0
     4ba:	ff 0b       	sbc	r31, r31
     4bc:	e9 59       	subi	r30, 0x99	; 153
     4be:	fe 4f       	sbci	r31, 0xFE	; 254
     4c0:	10 82       	st	Z, r1
				button_repeat = get_current_time() + INIT_DELAY;
     4c2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	84 5d       	subi	r24, 0xD4	; 212
     4cc:	9e 4f       	sbci	r25, 0xFE	; 254
     4ce:	af 4f       	sbci	r26, 0xFF	; 255
     4d0:	bf 4f       	sbci	r27, 0xFF	; 255
     4d2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     4d6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     4da:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     4de:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
				break;
     4e2:	62 c0       	rjmp	.+196    	; 0x5a8 <__vector_5+0x14a>
			case BUTTON_B1:
				button_queue[queue_length++] = 1;
     4e4:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <queue_length>
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	8e 0f       	add	r24, r30
     4ec:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <queue_length>
     4f0:	0e 2e       	mov	r0, r30
     4f2:	00 0c       	add	r0, r0
     4f4:	ff 0b       	sbc	r31, r31
     4f6:	e9 59       	subi	r30, 0x99	; 153
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	80 83       	st	Z, r24
				button_repeat = get_current_time() + INIT_DELAY;
     4fe:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	84 5d       	subi	r24, 0xD4	; 212
     508:	9e 4f       	sbci	r25, 0xFE	; 254
     50a:	af 4f       	sbci	r26, 0xFF	; 255
     50c:	bf 4f       	sbci	r27, 0xFF	; 255
     50e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     512:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     516:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     51a:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
				break;
     51e:	44 c0       	rjmp	.+136    	; 0x5a8 <__vector_5+0x14a>
			case BUTTON_B2:
				button_queue[queue_length++] = 2;
     520:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <queue_length>
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	8e 0f       	add	r24, r30
     528:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <queue_length>
     52c:	0e 2e       	mov	r0, r30
     52e:	00 0c       	add	r0, r0
     530:	ff 0b       	sbc	r31, r31
     532:	e9 59       	subi	r30, 0x99	; 153
     534:	fe 4f       	sbci	r31, 0xFE	; 254
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	80 83       	st	Z, r24
				button_repeat = get_current_time() + INIT_DELAY;
     53a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     53e:	dc 01       	movw	r26, r24
     540:	cb 01       	movw	r24, r22
     542:	84 5d       	subi	r24, 0xD4	; 212
     544:	9e 4f       	sbci	r25, 0xFE	; 254
     546:	af 4f       	sbci	r26, 0xFF	; 255
     548:	bf 4f       	sbci	r27, 0xFF	; 255
     54a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     54e:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     552:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     556:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
				break;
     55a:	26 c0       	rjmp	.+76     	; 0x5a8 <__vector_5+0x14a>
			case BUTTON_B3:
				button_queue[queue_length++] = 3;
     55c:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <queue_length>
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	8e 0f       	add	r24, r30
     564:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <queue_length>
     568:	0e 2e       	mov	r0, r30
     56a:	00 0c       	add	r0, r0
     56c:	ff 0b       	sbc	r31, r31
     56e:	e9 59       	subi	r30, 0x99	; 153
     570:	fe 4f       	sbci	r31, 0xFE	; 254
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	80 83       	st	Z, r24
				button_repeat = get_current_time() + INIT_DELAY;
     576:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	84 5d       	subi	r24, 0xD4	; 212
     580:	9e 4f       	sbci	r25, 0xFE	; 254
     582:	af 4f       	sbci	r26, 0xFF	; 255
     584:	bf 4f       	sbci	r27, 0xFF	; 255
     586:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     58a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
     58e:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__data_end+0x2>
     592:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__data_end+0x3>
				break;
     596:	08 c0       	rjmp	.+16     	; 0x5a8 <__vector_5+0x14a>
			default:
				button_repeat = 0;
     598:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
     59c:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <__data_end+0x1>
     5a0:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <__data_end+0x2>
     5a4:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <__data_end+0x3>
		}
		
	}
	
	// Remember this button state
	last_button_state = button_state;
     5a8:	c0 93 6b 01 	sts	0x016B, r28	; 0x80016b <last_button_state>
     5ac:	ff 91       	pop	r31
     5ae:	ef 91       	pop	r30
     5b0:	cf 91       	pop	r28
     5b2:	bf 91       	pop	r27
     5b4:	af 91       	pop	r26
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	7f 91       	pop	r23
     5bc:	6f 91       	pop	r22
     5be:	5f 91       	pop	r21
     5c0:	4f 91       	pop	r20
     5c2:	3f 91       	pop	r19
     5c4:	2f 91       	pop	r18
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <will_frog_die_at_position>:
	return frog_row;
}

uint8_t get_frog_column(void) {
	return frog_column;
}
     5d0:	0f 93       	push	r16
     5d2:	26 2f       	mov	r18, r22
     5d4:	60 31       	cpi	r22, 0x10	; 16
     5d6:	08 f0       	brcs	.+2      	; 0x5da <will_frog_die_at_position+0xa>
     5d8:	5b c0       	rjmp	.+182    	; 0x690 <will_frog_die_at_position+0xc0>
     5da:	48 2f       	mov	r20, r24
     5dc:	08 2e       	mov	r0, r24
     5de:	00 0c       	add	r0, r0
     5e0:	55 0b       	sbc	r21, r21
     5e2:	66 0b       	sbc	r22, r22
     5e4:	77 0b       	sbc	r23, r23
     5e6:	48 30       	cpi	r20, 0x08	; 8
     5e8:	51 05       	cpc	r21, r1
     5ea:	28 f4       	brcc	.+10     	; 0x5f6 <will_frog_die_at_position+0x26>
     5ec:	fa 01       	movw	r30, r20
     5ee:	e2 5c       	subi	r30, 0xC2	; 194
     5f0:	ff 4f       	sbci	r31, 0xFF	; 255
     5f2:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__tablejump2__>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	4e c0       	rjmp	.+156    	; 0x696 <will_frog_die_at_position+0xc6>
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	e8 2f       	mov	r30, r24
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	df 01       	movw	r26, r30
     602:	ae 58       	subi	r26, 0x8E	; 142
     604:	be 4f       	sbci	r27, 0xFE	; 254
     606:	0c 91       	ld	r16, X
     608:	02 0f       	add	r16, r18
     60a:	00 34       	cpi	r16, 0x40	; 64
     60c:	08 f0       	brcs	.+2      	; 0x610 <will_frog_die_at_position+0x40>
     60e:	00 54       	subi	r16, 0x40	; 64
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	e4 5e       	subi	r30, 0xE4	; 228
     61e:	fe 4f       	sbci	r31, 0xFE	; 254
     620:	20 81       	ld	r18, Z
     622:	31 81       	ldd	r19, Z+1	; 0x01
     624:	42 81       	ldd	r20, Z+2	; 0x02
     626:	53 81       	ldd	r21, Z+3	; 0x03
     628:	64 81       	ldd	r22, Z+4	; 0x04
     62a:	75 81       	ldd	r23, Z+5	; 0x05
     62c:	86 81       	ldd	r24, Z+6	; 0x06
     62e:	97 81       	ldd	r25, Z+7	; 0x07
     630:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__lshrdi3>
     634:	82 2f       	mov	r24, r18
     636:	81 70       	andi	r24, 0x01	; 1
     638:	2e c0       	rjmp	.+92     	; 0x696 <will_frog_die_at_position+0xc6>
     63a:	85 50       	subi	r24, 0x05	; 5
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	fc 01       	movw	r30, r24
     640:	e0 59       	subi	r30, 0x90	; 144
     642:	fe 4f       	sbci	r31, 0xFE	; 254
     644:	60 81       	ld	r22, Z
     646:	26 0f       	add	r18, r22
     648:	20 32       	cpi	r18, 0x20	; 32
     64a:	08 f0       	brcs	.+2      	; 0x64e <will_frog_die_at_position+0x7e>
     64c:	20 52       	subi	r18, 0x20	; 32
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	88 0f       	add	r24, r24
     654:	99 1f       	adc	r25, r25
     656:	fc 01       	movw	r30, r24
     658:	ec 5e       	subi	r30, 0xEC	; 236
     65a:	fe 4f       	sbci	r31, 0xFE	; 254
     65c:	80 81       	ld	r24, Z
     65e:	91 81       	ldd	r25, Z+1	; 0x01
     660:	a2 81       	ldd	r26, Z+2	; 0x02
     662:	b3 81       	ldd	r27, Z+3	; 0x03
     664:	04 c0       	rjmp	.+8      	; 0x66e <will_frog_die_at_position+0x9e>
     666:	b6 95       	lsr	r27
     668:	a7 95       	ror	r26
     66a:	97 95       	ror	r25
     66c:	87 95       	ror	r24
     66e:	2a 95       	dec	r18
     670:	d2 f7       	brpl	.-12     	; 0x666 <will_frog_die_at_position+0x96>
     672:	21 e0       	ldi	r18, 0x01	; 1
     674:	82 27       	eor	r24, r18
     676:	81 70       	andi	r24, 0x01	; 1
     678:	0e c0       	rjmp	.+28     	; 0x696 <will_frog_die_at_position+0xc6>
     67a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <riverbank_status>
     67e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <riverbank_status+0x1>
     682:	02 c0       	rjmp	.+4      	; 0x688 <will_frog_die_at_position+0xb8>
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	2a 95       	dec	r18
     68a:	e2 f7       	brpl	.-8      	; 0x684 <will_frog_die_at_position+0xb4>
     68c:	81 70       	andi	r24, 0x01	; 1
     68e:	03 c0       	rjmp	.+6      	; 0x696 <will_frog_die_at_position+0xc6>
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	01 c0       	rjmp	.+2      	; 0x696 <will_frog_die_at_position+0xc6>
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <redraw_frog>:
     69a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <frog_dead>
     69e:	88 23       	and	r24, r24
     6a0:	41 f0       	breq	.+16     	; 0x6b2 <redraw_frog+0x18>
     6a2:	45 e3       	ldi	r20, 0x35	; 53
     6a4:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <frog_row>
     6a8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <frog_column>
     6ac:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <ledmatrix_update_pixel>
     6b0:	08 95       	ret
     6b2:	40 ef       	ldi	r20, 0xF0	; 240
     6b4:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <frog_row>
     6b8:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <frog_column>
     6bc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <ledmatrix_update_pixel>
     6c0:	08 95       	ret

000006c2 <redraw_roadside>:
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	60 97       	sbiw	r28, 0x10	; 16
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	f8 94       	cli
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	0f be       	out	0x3f, r0	; 63
     6d4:	cd bf       	out	0x3d, r28	; 61
     6d6:	fe 01       	movw	r30, r28
     6d8:	31 96       	adiw	r30, 0x01	; 1
     6da:	9e 01       	movw	r18, r28
     6dc:	2f 5e       	subi	r18, 0xEF	; 239
     6de:	3f 4f       	sbci	r19, 0xFF	; 255
     6e0:	91 e1       	ldi	r25, 0x11	; 17
     6e2:	91 93       	st	Z+, r25
     6e4:	e2 17       	cp	r30, r18
     6e6:	f3 07       	cpc	r31, r19
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <redraw_roadside+0x20>
     6ea:	be 01       	movw	r22, r28
     6ec:	6f 5f       	subi	r22, 0xFF	; 255
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	0e 94 09 07 	call	0xe12	; 0xe12 <ledmatrix_update_row>
     6f4:	60 96       	adiw	r28, 0x10	; 16
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	08 95       	ret

00000706 <redraw_traffic_lane>:
     706:	3f 92       	push	r3
     708:	4f 92       	push	r4
     70a:	5f 92       	push	r5
     70c:	6f 92       	push	r6
     70e:	7f 92       	push	r7
     710:	8f 92       	push	r8
     712:	9f 92       	push	r9
     714:	af 92       	push	r10
     716:	bf 92       	push	r11
     718:	cf 92       	push	r12
     71a:	df 92       	push	r13
     71c:	ef 92       	push	r14
     71e:	ff 92       	push	r15
     720:	0f 93       	push	r16
     722:	1f 93       	push	r17
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	60 97       	sbiw	r28, 0x10	; 16
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	48 2e       	mov	r4, r24
     73a:	28 2f       	mov	r18, r24
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	ee 58       	subi	r30, 0x8E	; 142
     742:	fe 4f       	sbci	r31, 0xFE	; 254
     744:	e0 81       	ld	r30, Z
     746:	c9 01       	movw	r24, r18
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	84 5e       	subi	r24, 0xE4	; 228
     756:	9e 4f       	sbci	r25, 0xFE	; 254
     758:	dc 01       	movw	r26, r24
     75a:	5c 90       	ld	r5, X
     75c:	11 96       	adiw	r26, 0x01	; 1
     75e:	6c 90       	ld	r6, X
     760:	11 97       	sbiw	r26, 0x01	; 1
     762:	12 96       	adiw	r26, 0x02	; 2
     764:	7c 90       	ld	r7, X
     766:	12 97       	sbiw	r26, 0x02	; 2
     768:	13 96       	adiw	r26, 0x03	; 3
     76a:	8c 90       	ld	r8, X
     76c:	13 97       	sbiw	r26, 0x03	; 3
     76e:	14 96       	adiw	r26, 0x04	; 4
     770:	9c 90       	ld	r9, X
     772:	14 97       	sbiw	r26, 0x04	; 4
     774:	15 96       	adiw	r26, 0x05	; 5
     776:	1c 91       	ld	r17, X
     778:	15 97       	sbiw	r26, 0x05	; 5
     77a:	16 96       	adiw	r26, 0x06	; 6
     77c:	3c 90       	ld	r3, X
     77e:	16 97       	sbiw	r26, 0x06	; 6
     780:	17 96       	adiw	r26, 0x07	; 7
     782:	fc 91       	ld	r31, X
     784:	ce 01       	movw	r24, r28
     786:	01 96       	adiw	r24, 0x01	; 1
     788:	7c 01       	movw	r14, r24
     78a:	6e 01       	movw	r12, r28
     78c:	91 e1       	ldi	r25, 0x11	; 17
     78e:	c9 0e       	add	r12, r25
     790:	d1 1c       	adc	r13, r1
     792:	d9 01       	movw	r26, r18
     794:	a0 50       	subi	r26, 0x00	; 0
     796:	bf 4f       	sbci	r27, 0xFF	; 255
     798:	5d 01       	movw	r10, r26
     79a:	25 2d       	mov	r18, r5
     79c:	36 2d       	mov	r19, r6
     79e:	47 2d       	mov	r20, r7
     7a0:	58 2d       	mov	r21, r8
     7a2:	69 2d       	mov	r22, r9
     7a4:	71 2f       	mov	r23, r17
     7a6:	83 2d       	mov	r24, r3
     7a8:	9f 2f       	mov	r25, r31
     7aa:	0e 2f       	mov	r16, r30
     7ac:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__lshrdi3>
     7b0:	21 70       	andi	r18, 0x01	; 1
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	a0 e0       	ldi	r26, 0x00	; 0
     7c2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__cmpdi2_s8>
     7c6:	29 f0       	breq	.+10     	; 0x7d2 <redraw_traffic_lane+0xcc>
     7c8:	d5 01       	movw	r26, r10
     7ca:	8c 91       	ld	r24, X
     7cc:	d7 01       	movw	r26, r14
     7ce:	8c 93       	st	X, r24
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <redraw_traffic_lane+0xd0>
     7d2:	d7 01       	movw	r26, r14
     7d4:	1c 92       	st	X, r1
     7d6:	ef 5f       	subi	r30, 0xFF	; 255
     7d8:	e0 34       	cpi	r30, 0x40	; 64
     7da:	08 f0       	brcs	.+2      	; 0x7de <redraw_traffic_lane+0xd8>
     7dc:	e0 e0       	ldi	r30, 0x00	; 0
     7de:	bf ef       	ldi	r27, 0xFF	; 255
     7e0:	eb 1a       	sub	r14, r27
     7e2:	fb 0a       	sbc	r15, r27
     7e4:	ec 14       	cp	r14, r12
     7e6:	fd 04       	cpc	r15, r13
     7e8:	c1 f6       	brne	.-80     	; 0x79a <redraw_traffic_lane+0x94>
     7ea:	be 01       	movw	r22, r28
     7ec:	6f 5f       	subi	r22, 0xFF	; 255
     7ee:	7f 4f       	sbci	r23, 0xFF	; 255
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	84 0d       	add	r24, r4
     7f4:	0e 94 09 07 	call	0xe12	; 0xe12 <ledmatrix_update_row>
     7f8:	60 96       	adiw	r28, 0x10	; 16
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	df 90       	pop	r13
     812:	cf 90       	pop	r12
     814:	bf 90       	pop	r11
     816:	af 90       	pop	r10
     818:	9f 90       	pop	r9
     81a:	8f 90       	pop	r8
     81c:	7f 90       	pop	r7
     81e:	6f 90       	pop	r6
     820:	5f 90       	pop	r5
     822:	4f 90       	pop	r4
     824:	3f 90       	pop	r3
     826:	08 95       	ret

00000828 <redraw_river_channel>:
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	60 97       	sbiw	r28, 0x10	; 16
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	28 2f       	mov	r18, r24
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	f9 01       	movw	r30, r18
     84a:	e0 59       	subi	r30, 0x90	; 144
     84c:	fe 4f       	sbci	r31, 0xFE	; 254
     84e:	90 81       	ld	r25, Z
     850:	22 0f       	add	r18, r18
     852:	33 1f       	adc	r19, r19
     854:	22 0f       	add	r18, r18
     856:	33 1f       	adc	r19, r19
     858:	f9 01       	movw	r30, r18
     85a:	ec 5e       	subi	r30, 0xEC	; 236
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	c0 80       	ld	r12, Z
     860:	d1 80       	ldd	r13, Z+1	; 0x01
     862:	e2 80       	ldd	r14, Z+2	; 0x02
     864:	f3 80       	ldd	r15, Z+3	; 0x03
     866:	fe 01       	movw	r30, r28
     868:	31 96       	adiw	r30, 0x01	; 1
     86a:	9e 01       	movw	r18, r28
     86c:	2f 5e       	subi	r18, 0xEF	; 239
     86e:	3f 4f       	sbci	r19, 0xFF	; 255
     870:	ac e3       	ldi	r26, 0x3C	; 60
     872:	b7 01       	movw	r22, r14
     874:	a6 01       	movw	r20, r12
     876:	09 2e       	mov	r0, r25
     878:	04 c0       	rjmp	.+8      	; 0x882 <redraw_river_channel+0x5a>
     87a:	76 95       	lsr	r23
     87c:	67 95       	ror	r22
     87e:	57 95       	ror	r21
     880:	47 95       	ror	r20
     882:	0a 94       	dec	r0
     884:	d2 f7       	brpl	.-12     	; 0x87a <redraw_river_channel+0x52>
     886:	40 ff       	sbrs	r20, 0
     888:	02 c0       	rjmp	.+4      	; 0x88e <redraw_river_channel+0x66>
     88a:	a0 83       	st	Z, r26
     88c:	01 c0       	rjmp	.+2      	; 0x890 <redraw_river_channel+0x68>
     88e:	10 82       	st	Z, r1
     890:	9f 5f       	subi	r25, 0xFF	; 255
     892:	90 32       	cpi	r25, 0x20	; 32
     894:	08 f0       	brcs	.+2      	; 0x898 <redraw_river_channel+0x70>
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	31 96       	adiw	r30, 0x01	; 1
     89a:	e2 17       	cp	r30, r18
     89c:	f3 07       	cpc	r31, r19
     89e:	49 f7       	brne	.-46     	; 0x872 <redraw_river_channel+0x4a>
     8a0:	be 01       	movw	r22, r28
     8a2:	6f 5f       	subi	r22, 0xFF	; 255
     8a4:	7f 4f       	sbci	r23, 0xFF	; 255
     8a6:	8b 5f       	subi	r24, 0xFB	; 251
     8a8:	0e 94 09 07 	call	0xe12	; 0xe12 <ledmatrix_update_row>
     8ac:	60 96       	adiw	r28, 0x10	; 16
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	08 95       	ret

000008c6 <redraw_riverbank>:
     8c6:	ef 92       	push	r14
     8c8:	ff 92       	push	r15
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
     8d6:	60 97       	sbiw	r28, 0x10	; 16
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <riverbank>
     8e6:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <riverbank+0x1>
     8ea:	e0 90 6c 01 	lds	r14, 0x016C	; 0x80016c <riverbank_status>
     8ee:	f0 90 6d 01 	lds	r15, 0x016D	; 0x80016d <riverbank_status+0x1>
     8f2:	ae 01       	movw	r20, r28
     8f4:	4f 5f       	subi	r20, 0xFF	; 255
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	be 01       	movw	r22, r28
     8fa:	6f 5e       	subi	r22, 0xEF	; 239
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	fa 01       	movw	r30, r20
     900:	00 ef       	ldi	r16, 0xF0	; 240
     902:	11 e1       	ldi	r17, 0x11	; 17
     904:	cf 01       	movw	r24, r30
     906:	84 1b       	sub	r24, r20
     908:	95 0b       	sbc	r25, r21
     90a:	9d 01       	movw	r18, r26
     90c:	08 2e       	mov	r0, r24
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
     910:	36 95       	lsr	r19
     912:	27 95       	ror	r18
     914:	0a 94       	dec	r0
     916:	e2 f7       	brpl	.-8      	; 0x910 <__stack+0x11>
     918:	20 ff       	sbrs	r18, 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0x21>
     91c:	10 83       	st	Z, r17
     91e:	0b c0       	rjmp	.+22     	; 0x936 <__stack+0x37>
     920:	97 01       	movw	r18, r14
     922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
     924:	36 95       	lsr	r19
     926:	27 95       	ror	r18
     928:	8a 95       	dec	r24
     92a:	e2 f7       	brpl	.-8      	; 0x924 <__stack+0x25>
     92c:	20 ff       	sbrs	r18, 0
     92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0x35>
     930:	00 83       	st	Z, r16
     932:	01 c0       	rjmp	.+2      	; 0x936 <__stack+0x37>
     934:	10 82       	st	Z, r1
     936:	31 96       	adiw	r30, 0x01	; 1
     938:	e6 17       	cp	r30, r22
     93a:	f7 07       	cpc	r31, r23
     93c:	19 f7       	brne	.-58     	; 0x904 <__stack+0x5>
     93e:	be 01       	movw	r22, r28
     940:	6f 5f       	subi	r22, 0xFF	; 255
     942:	7f 4f       	sbci	r23, 0xFF	; 255
     944:	87 e0       	ldi	r24, 0x07	; 7
     946:	0e 94 09 07 	call	0xe12	; 0xe12 <ledmatrix_update_row>
     94a:	60 96       	adiw	r28, 0x10	; 16
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	08 95       	ret

00000964 <redraw_row>:
     964:	48 2f       	mov	r20, r24
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	48 30       	cpi	r20, 0x08	; 8
     96a:	51 05       	cpc	r21, r1
     96c:	90 f4       	brcc	.+36     	; 0x992 <redraw_row+0x2e>
     96e:	fa 01       	movw	r30, r20
     970:	ea 5b       	subi	r30, 0xBA	; 186
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__tablejump2__>
     978:	0e 94 61 03 	call	0x6c2	; 0x6c2 <redraw_roadside>
     97c:	08 95       	ret
     97e:	81 50       	subi	r24, 0x01	; 1
     980:	0e 94 83 03 	call	0x706	; 0x706 <redraw_traffic_lane>
     984:	08 95       	ret
     986:	85 50       	subi	r24, 0x05	; 5
     988:	0e 94 14 04 	call	0x828	; 0x828 <redraw_river_channel>
     98c:	08 95       	ret
     98e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <redraw_riverbank>
     992:	08 95       	ret

00000994 <put_frog_in_start_position>:
     994:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <frog_row>
     998:	87 e0       	ldi	r24, 0x07	; 7
     99a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <frog_column>
     99e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <frog_dead>
     9a2:	0e 94 4d 03 	call	0x69a	; 0x69a <redraw_frog>
     9a6:	08 95       	ret

000009a8 <move_frog_forward>:
     9a8:	cf 93       	push	r28
     9aa:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     9ae:	0e 94 b2 04 	call	0x964	; 0x964 <redraw_row>
     9b2:	c0 91 77 01 	lds	r28, 0x0177	; 0x800177 <frog_row>
     9b6:	cf 5f       	subi	r28, 0xFF	; 255
     9b8:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <frog_column>
     9bc:	8c 2f       	mov	r24, r28
     9be:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <will_frog_die_at_position>
     9c2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <frog_dead>
     9c6:	c0 93 77 01 	sts	0x0177, r28	; 0x800177 <frog_row>
     9ca:	0e 94 4d 03 	call	0x69a	; 0x69a <redraw_frog>
     9ce:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <frog_dead>
     9d2:	81 11       	cpse	r24, r1
     9d4:	1f c0       	rjmp	.+62     	; 0xa14 <move_frog_forward+0x6c>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 57 0b 	call	0x16ae	; 0x16ae <add_to_score>
     9de:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <frog_dead>
     9e2:	81 11       	cpse	r24, r1
     9e4:	17 c0       	rjmp	.+46     	; 0xa14 <move_frog_forward+0x6c>
     9e6:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     9ea:	87 30       	cpi	r24, 0x07	; 7
     9ec:	99 f4       	brne	.+38     	; 0xa14 <move_frog_forward+0x6c>
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	00 90 76 01 	lds	r0, 0x0176	; 0x800176 <frog_column>
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <move_frog_forward+0x54>
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	0a 94       	dec	r0
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <move_frog_forward+0x50>
     a00:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <riverbank_status>
     a04:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <riverbank_status+0x1>
     a08:	82 2b       	or	r24, r18
     a0a:	93 2b       	or	r25, r19
     a0c:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <riverbank_status+0x1>
     a10:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <riverbank_status>
     a14:	cf 91       	pop	r28
     a16:	08 95       	ret

00000a18 <move_frog_backward>:
     a18:	cf 93       	push	r28
     a1a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     a1e:	0e 94 b2 04 	call	0x964	; 0x964 <redraw_row>
     a22:	c0 91 77 01 	lds	r28, 0x0177	; 0x800177 <frog_row>
     a26:	c1 50       	subi	r28, 0x01	; 1
     a28:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <frog_column>
     a2c:	8c 2f       	mov	r24, r28
     a2e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <will_frog_die_at_position>
     a32:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <frog_dead>
     a36:	c0 93 77 01 	sts	0x0177, r28	; 0x800177 <frog_row>
     a3a:	0e 94 4d 03 	call	0x69a	; 0x69a <redraw_frog>
     a3e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <frog_dead>
     a42:	81 11       	cpse	r24, r1
     a44:	17 c0       	rjmp	.+46     	; 0xa74 <move_frog_backward+0x5c>
     a46:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     a4a:	87 30       	cpi	r24, 0x07	; 7
     a4c:	99 f4       	brne	.+38     	; 0xa74 <move_frog_backward+0x5c>
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	00 90 76 01 	lds	r0, 0x0176	; 0x800176 <frog_column>
     a56:	02 c0       	rjmp	.+4      	; 0xa5c <move_frog_backward+0x44>
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	0a 94       	dec	r0
     a5e:	e2 f7       	brpl	.-8      	; 0xa58 <move_frog_backward+0x40>
     a60:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <riverbank_status>
     a64:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <riverbank_status+0x1>
     a68:	82 2b       	or	r24, r18
     a6a:	93 2b       	or	r25, r19
     a6c:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <riverbank_status+0x1>
     a70:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <riverbank_status>
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <move_frog_to_left>:
     a78:	cf 93       	push	r28
     a7a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     a7e:	0e 94 b2 04 	call	0x964	; 0x964 <redraw_row>
     a82:	c0 91 76 01 	lds	r28, 0x0176	; 0x800176 <frog_column>
     a86:	c1 50       	subi	r28, 0x01	; 1
     a88:	6c 2f       	mov	r22, r28
     a8a:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     a8e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <will_frog_die_at_position>
     a92:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <frog_dead>
     a96:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <frog_column>
     a9a:	0e 94 4d 03 	call	0x69a	; 0x69a <redraw_frog>
     a9e:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <frog_dead>
     aa2:	81 11       	cpse	r24, r1
     aa4:	17 c0       	rjmp	.+46     	; 0xad4 <move_frog_to_left+0x5c>
     aa6:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     aaa:	87 30       	cpi	r24, 0x07	; 7
     aac:	99 f4       	brne	.+38     	; 0xad4 <move_frog_to_left+0x5c>
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	00 90 76 01 	lds	r0, 0x0176	; 0x800176 <frog_column>
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <move_frog_to_left+0x44>
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	0a 94       	dec	r0
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <move_frog_to_left+0x40>
     ac0:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <riverbank_status>
     ac4:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <riverbank_status+0x1>
     ac8:	82 2b       	or	r24, r18
     aca:	93 2b       	or	r25, r19
     acc:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <riverbank_status+0x1>
     ad0:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <riverbank_status>
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <move_frog_to_right>:
     ad8:	cf 93       	push	r28
     ada:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     ade:	0e 94 b2 04 	call	0x964	; 0x964 <redraw_row>
     ae2:	c0 91 76 01 	lds	r28, 0x0176	; 0x800176 <frog_column>
     ae6:	cf 5f       	subi	r28, 0xFF	; 255
     ae8:	6c 2f       	mov	r22, r28
     aea:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     aee:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <will_frog_die_at_position>
     af2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <frog_dead>
     af6:	c0 93 76 01 	sts	0x0176, r28	; 0x800176 <frog_column>
     afa:	0e 94 4d 03 	call	0x69a	; 0x69a <redraw_frog>
     afe:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <frog_dead>
     b02:	81 11       	cpse	r24, r1
     b04:	17 c0       	rjmp	.+46     	; 0xb34 <move_frog_to_right+0x5c>
     b06:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     b0a:	87 30       	cpi	r24, 0x07	; 7
     b0c:	99 f4       	brne	.+38     	; 0xb34 <move_frog_to_right+0x5c>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	00 90 76 01 	lds	r0, 0x0176	; 0x800176 <frog_column>
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <move_frog_to_right+0x44>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	0a 94       	dec	r0
     b1e:	e2 f7       	brpl	.-8      	; 0xb18 <move_frog_to_right+0x40>
     b20:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <riverbank_status>
     b24:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <riverbank_status+0x1>
     b28:	82 2b       	or	r24, r18
     b2a:	93 2b       	or	r25, r19
     b2c:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <riverbank_status+0x1>
     b30:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <riverbank_status>
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <is_riverbank_full>:

uint8_t is_riverbank_full(void) {
	return (riverbank_status == 0xFFFF);
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <riverbank_status>
     b3e:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <riverbank_status+0x1>
     b42:	2f 3f       	cpi	r18, 0xFF	; 255
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	09 f0       	breq	.+2      	; 0xb4a <is_riverbank_full+0x12>
     b48:	80 e0       	ldi	r24, 0x00	; 0
}
     b4a:	08 95       	ret

00000b4c <frog_has_reached_riverbank>:

uint8_t frog_has_reached_riverbank(void) {
	return (frog_row == RIVERBANK_ROW);
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <frog_row>
     b52:	97 30       	cpi	r25, 0x07	; 7
     b54:	09 f0       	breq	.+2      	; 0xb58 <frog_has_reached_riverbank+0xc>
     b56:	80 e0       	ldi	r24, 0x00	; 0
}
     b58:	08 95       	ret

00000b5a <is_frog_dead>:

uint8_t is_frog_dead(void) {
	return frog_dead;
}
     b5a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <frog_dead>
     b5e:	08 95       	ret

00000b60 <kill_frog>:

void kill_frog(void) {
	frog_dead = 1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <frog_dead>
     b66:	08 95       	ret

00000b68 <scroll_vehicle_lane>:
}

// Scroll the given lane of traffic. (lane value must be 0 to 2)
void scroll_vehicle_lane(uint8_t lane, int8_t direction) {
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
	uint8_t frog_is_in_this_row = (frog_row == lane + FIRST_VEHICLE_ROW);
     b70:	c0 91 77 01 	lds	r28, 0x0177	; 0x800177 <frog_row>
     b74:	0c 2e       	mov	r0, r28
     b76:	00 0c       	add	r0, r0
     b78:	dd 0b       	sbc	r29, r29
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	89 01       	movw	r16, r18
     b80:	0f 5f       	subi	r16, 0xFF	; 255
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
	// Work out the new lane position.
	// Wrap numbers around if they go out of range
	// A direction of -1 indicates movement to the left which means we
	// start from a higher bit position in column 0
	lane_position[lane] -= direction;
     b84:	f9 01       	movw	r30, r18
     b86:	ee 58       	subi	r30, 0x8E	; 142
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	90 81       	ld	r25, Z
     b8c:	96 1b       	sub	r25, r22
	if(lane_position[lane] < 0) {
     b8e:	32 f4       	brpl	.+12     	; 0xb9c <scroll_vehicle_lane+0x34>
		lane_position[lane] = LANE_DATA_WIDTH-1;
     b90:	f9 01       	movw	r30, r18
     b92:	ee 58       	subi	r30, 0x8E	; 142
     b94:	fe 4f       	sbci	r31, 0xFE	; 254
     b96:	9f e3       	ldi	r25, 0x3F	; 63
     b98:	90 83       	st	Z, r25
     b9a:	0b c0       	rjmp	.+22     	; 0xbb2 <scroll_vehicle_lane+0x4a>
	} else if(lane_position[lane] >= LANE_DATA_WIDTH) {
     b9c:	90 34       	cpi	r25, 0x40	; 64
     b9e:	2c f4       	brge	.+10     	; 0xbaa <scroll_vehicle_lane+0x42>
	uint8_t frog_is_in_this_row = (frog_row == lane + FIRST_VEHICLE_ROW);
	// Work out the new lane position.
	// Wrap numbers around if they go out of range
	// A direction of -1 indicates movement to the left which means we
	// start from a higher bit position in column 0
	lane_position[lane] -= direction;
     ba0:	f9 01       	movw	r30, r18
     ba2:	ee 58       	subi	r30, 0x8E	; 142
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	90 83       	st	Z, r25
     ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <scroll_vehicle_lane+0x4a>
	if(lane_position[lane] < 0) {
		lane_position[lane] = LANE_DATA_WIDTH-1;
	} else if(lane_position[lane] >= LANE_DATA_WIDTH) {
		lane_position[lane] = 0;
     baa:	f9 01       	movw	r30, r18
     bac:	ee 58       	subi	r30, 0x8E	; 142
     bae:	fe 4f       	sbci	r31, 0xFE	; 254
     bb0:	10 82       	st	Z, r1
	}
	
	// Show the lane on the display
	redraw_traffic_lane(lane);
     bb2:	0e 94 83 03 	call	0x706	; 0x706 <redraw_traffic_lane>
	
	// If the frog is in this row, show it
	if(frog_is_in_this_row) {
     bb6:	c0 17       	cp	r28, r16
     bb8:	d1 07       	cpc	r29, r17
     bba:	51 f4       	brne	.+20     	; 0xbd0 <scroll_vehicle_lane+0x68>
		// Update whether the frog will be alive or not. (The frog hasn't moved but
		// it may have been hit by a vehicle.)
		frog_dead = will_frog_die_at_position(frog_row, frog_column);
     bbc:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <frog_column>
     bc0:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <frog_row>
     bc4:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <will_frog_die_at_position>
     bc8:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <frog_dead>
		redraw_frog();
     bcc:	0e 94 4d 03 	call	0x69a	; 0x69a <redraw_frog>
	}
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	08 95       	ret

00000bda <scroll_river_channel>:


void scroll_river_channel(uint8_t channel, int8_t direction) {
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
	uint8_t frog_is_in_this_row = (frog_row == channel + FIRST_RIVER_ROW);
     be2:	c0 91 77 01 	lds	r28, 0x0177	; 0x800177 <frog_row>
     be6:	0c 2e       	mov	r0, r28
     be8:	00 0c       	add	r0, r0
     bea:	dd 0b       	sbc	r29, r29
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	89 01       	movw	r16, r18
     bf2:	0b 5f       	subi	r16, 0xFB	; 251
     bf4:	1f 4f       	sbci	r17, 0xFF	; 255
	// Note, if the frog is in this row then it will be on a log
	
	if(frog_is_in_this_row) {
     bf6:	c0 17       	cp	r28, r16
     bf8:	d1 07       	cpc	r29, r17
     bfa:	c9 f4       	brne	.+50     	; 0xc2e <scroll_river_channel+0x54>
		// Check if they're going to hit the edge - don't let the frog
		// go beyond the edge
		if(direction == 1 && frog_column == 15) {
     bfc:	61 30       	cpi	r22, 0x01	; 1
     bfe:	41 f4       	brne	.+16     	; 0xc10 <scroll_river_channel+0x36>
     c00:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <frog_column>
     c04:	9f 30       	cpi	r25, 0x0F	; 15
     c06:	71 f4       	brne	.+28     	; 0xc24 <scroll_river_channel+0x4a>
			frog_dead = 1; // hit right edge
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <frog_dead>
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <scroll_river_channel+0x54>
		} else if(direction == -1 && frog_column == 0) {
     c10:	6f 3f       	cpi	r22, 0xFF	; 255
     c12:	41 f4       	brne	.+16     	; 0xc24 <scroll_river_channel+0x4a>
     c14:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <frog_column>
     c18:	91 11       	cpse	r25, r1
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <scroll_river_channel+0x4a>
			frog_dead = 1; // hit left edge
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <frog_dead>
     c22:	05 c0       	rjmp	.+10     	; 0xc2e <scroll_river_channel+0x54>
		} else {
			// Move the frog with the log - they're not going to hit the edge
			frog_column += direction;
     c24:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <frog_column>
     c28:	96 0f       	add	r25, r22
     c2a:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <frog_column>
		}
	}
		
	// Work out the new log position.
	// Wrap numbers around if they go out of range
	log_position[channel] -= direction;
     c2e:	f9 01       	movw	r30, r18
     c30:	e0 59       	subi	r30, 0x90	; 144
     c32:	fe 4f       	sbci	r31, 0xFE	; 254
     c34:	90 81       	ld	r25, Z
     c36:	96 1b       	sub	r25, r22
	if(log_position[channel] < 0) {
     c38:	32 f4       	brpl	.+12     	; 0xc46 <scroll_river_channel+0x6c>
		log_position[channel] = LOG_DATA_WIDTH-1;
     c3a:	f9 01       	movw	r30, r18
     c3c:	e0 59       	subi	r30, 0x90	; 144
     c3e:	fe 4f       	sbci	r31, 0xFE	; 254
     c40:	9f e1       	ldi	r25, 0x1F	; 31
     c42:	90 83       	st	Z, r25
     c44:	0b c0       	rjmp	.+22     	; 0xc5c <scroll_river_channel+0x82>
	} else if(log_position[channel] >= LOG_DATA_WIDTH) {
     c46:	90 32       	cpi	r25, 0x20	; 32
     c48:	2c f4       	brge	.+10     	; 0xc54 <scroll_river_channel+0x7a>
		}
	}
		
	// Work out the new log position.
	// Wrap numbers around if they go out of range
	log_position[channel] -= direction;
     c4a:	f9 01       	movw	r30, r18
     c4c:	e0 59       	subi	r30, 0x90	; 144
     c4e:	fe 4f       	sbci	r31, 0xFE	; 254
     c50:	90 83       	st	Z, r25
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <scroll_river_channel+0x82>
	if(log_position[channel] < 0) {
		log_position[channel] = LOG_DATA_WIDTH-1;
	} else if(log_position[channel] >= LOG_DATA_WIDTH) {
		log_position[channel] = 0;
     c54:	f9 01       	movw	r30, r18
     c56:	e0 59       	subi	r30, 0x90	; 144
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	10 82       	st	Z, r1
	}
		
	// Work out the log data to send to the display
	redraw_river_channel(channel);
     c5c:	0e 94 14 04 	call	0x828	; 0x828 <redraw_river_channel>
		
	// If the frog is in this row, put them on the log
	if(frog_is_in_this_row) {
     c60:	c0 17       	cp	r28, r16
     c62:	d1 07       	cpc	r29, r17
     c64:	11 f4       	brne	.+4      	; 0xc6a <scroll_river_channel+0x90>
		redraw_frog();
     c66:	0e 94 4d 03 	call	0x69a	; 0x69a <redraw_frog>
	}
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <redraw_whole_display>:
}

// Redraw the rows on the game field. The frog is not redrawn.
void redraw_whole_display(void) {
	// Clear the display
	ledmatrix_clear();
     c74:	0e 94 4a 07 	call	0xe94	; 0xe94 <ledmatrix_clear>
	
	// Start with the starting and halfway rows
	redraw_roadside(START_ROW);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 61 03 	call	0x6c2	; 0x6c2 <redraw_roadside>
	redraw_roadside(HALFWAY_ROW);
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	0e 94 61 03 	call	0x6c2	; 0x6c2 <redraw_roadside>

	// Redraw traffic lanes
	for(uint8_t lane=0; lane<=2; lane++) {
		redraw_traffic_lane(lane);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 83 03 	call	0x706	; 0x706 <redraw_traffic_lane>
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	0e 94 83 03 	call	0x706	; 0x706 <redraw_traffic_lane>
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	0e 94 83 03 	call	0x706	; 0x706 <redraw_traffic_lane>
	}
	// Redraw river
	for(uint8_t channel=0; channel<=1; channel++) {
		redraw_river_channel(channel);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 14 04 	call	0x828	; 0x828 <redraw_river_channel>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	0e 94 14 04 	call	0x828	; 0x828 <redraw_river_channel>
	}
	// Redraw riverbank
	redraw_riverbank();
     ca2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <redraw_riverbank>
     ca6:	08 95       	ret

00000ca8 <initialise_game>:
// These functions are defined in the same order as declared in game.h

// Reset the game
void initialise_game(void) {
	// Initial lane and log positions
	lane_position[0] = lane_position[1] = lane_position[2] = 0;
     ca8:	e2 e7       	ldi	r30, 0x72	; 114
     caa:	f1 e0       	ldi	r31, 0x01	; 1
     cac:	12 82       	std	Z+2, r1	; 0x02
     cae:	11 82       	std	Z+1, r1	; 0x01
     cb0:	10 82       	st	Z, r1
	log_position[0] = log_position[1] = 0;
     cb2:	e0 e7       	ldi	r30, 0x70	; 112
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	11 82       	std	Z+1, r1	; 0x01
     cb8:	10 82       	st	Z, r1
	
	// Initial riverbank pattern
	riverbank = RIVERBANK;
     cba:	8d ed       	ldi	r24, 0xDD	; 221
     cbc:	9d ed       	ldi	r25, 0xDD	; 221
     cbe:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <riverbank+0x1>
     cc2:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <riverbank>
	riverbank_status = RIVERBANK;
     cc6:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <riverbank_status+0x1>
     cca:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <riverbank_status>
	
	redraw_whole_display();
     cce:	0e 94 3a 06 	call	0xc74	; 0xc74 <redraw_whole_display>
	
	// Add a frog to the roadside - this will redraw the frog
	put_frog_in_start_position();
     cd2:	0e 94 ca 04 	call	0x994	; 0x994 <put_frog_in_start_position>
     cd6:	08 95       	ret

00000cd8 <init_joystick>:
static uint8_t old_direction;
static uint32_t old_time;

void init_joystick(void) {
	// Set up ADC - AVCC reference, right adjust
	ADMUX = (1 << REFS0);
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
		
	// Turn on the ADC
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
     cde:	86 e8       	ldi	r24, 0x86	; 134
     ce0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     ce4:	08 95       	ret

00000ce6 <adc_values>:
}

void adc_values(void) {
	// x axis 
	// ADC6
	ADMUX = 0b01000110;
     ce6:	86 e4       	ldi	r24, 0x46	; 70
     ce8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Start the ADC conversion
	ADCSRA |= (1 << ADSC);
     cec:	ea e7       	ldi	r30, 0x7A	; 122
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	80 64       	ori	r24, 0x40	; 64
     cf4:	80 83       	st	Z, r24
		
	while(ADCSRA & (1 << ADSC)) {
     cf6:	80 81       	ld	r24, Z
     cf8:	86 fd       	sbrc	r24, 6
     cfa:	fd cf       	rjmp	.-6      	; 0xcf6 <adc_values+0x10>
		; /* Wait until conversion finished */
	}
	
	x_value = ADC; // read the value
     cfc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     d00:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     d04:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <x_value+0x1>
     d08:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <x_value>
	
	// y axis
	// ADC7
	ADMUX = 0b01000111;
     d0c:	87 e4       	ldi	r24, 0x47	; 71
     d0e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Start the ADC conversion
	ADCSRA |= (1 << ADSC);
     d12:	ea e7       	ldi	r30, 0x7A	; 122
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	80 83       	st	Z, r24
		
	while(ADCSRA & (1 << ADSC)) {
     d1c:	80 81       	ld	r24, Z
     d1e:	86 fd       	sbrc	r24, 6
     d20:	fd cf       	rjmp	.-6      	; 0xd1c <adc_values+0x36>
		; /* Wait until conversion finished */
	}
	
	y_value = ADC; // read the value
     d22:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     d26:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     d2a:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <y_value+0x1>
     d2e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <y_value>
     d32:	08 95       	ret

00000d34 <joystick_direction>:
}

int8_t joystick_direction(void) {
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
	 */
	
	uint8_t new_direction;
	uint32_t current_time;
	
	adc_values();
     d3a:	0e 94 73 06 	call	0xce6	; 0xce6 <adc_values>
	
	if(x_value < 250) {
     d3e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <x_value>
     d42:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <x_value+0x1>
     d46:	8a 3f       	cpi	r24, 0xFA	; 250
     d48:	91 05       	cpc	r25, r1
     d4a:	88 f0       	brcs	.+34     	; 0xd6e <joystick_direction+0x3a>
		new_direction = 3;
	} else if (y_value < 250) {
     d4c:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <y_value>
     d50:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <y_value+0x1>
     d54:	2a 3f       	cpi	r18, 0xFA	; 250
     d56:	31 05       	cpc	r19, r1
     d58:	60 f0       	brcs	.+24     	; 0xd72 <joystick_direction+0x3e>
		new_direction = 2;
	} else if (x_value > 760) {
     d5a:	89 3f       	cpi	r24, 0xF9	; 249
     d5c:	92 40       	sbci	r25, 0x02	; 2
     d5e:	58 f4       	brcc	.+22     	; 0xd76 <joystick_direction+0x42>
		new_direction = 1;
	} else if (y_value > 760) {
     d60:	c1 e0       	ldi	r28, 0x01	; 1
     d62:	29 3f       	cpi	r18, 0xF9	; 249
     d64:	32 40       	sbci	r19, 0x02	; 2
     d66:	08 f0       	brcs	.+2      	; 0xd6a <joystick_direction+0x36>
     d68:	c0 e0       	ldi	r28, 0x00	; 0
     d6a:	c1 95       	neg	r28
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <joystick_direction+0x44>
	uint32_t current_time;
	
	adc_values();
	
	if(x_value < 250) {
		new_direction = 3;
     d6e:	c3 e0       	ldi	r28, 0x03	; 3
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <joystick_direction+0x44>
	} else if (y_value < 250) {
		new_direction = 2;
     d72:	c2 e0       	ldi	r28, 0x02	; 2
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <joystick_direction+0x44>
	} else if (x_value > 760) {
		new_direction = 1;
     d76:	c1 e0       	ldi	r28, 0x01	; 1
			//new_direction = -1;
		//}
	//}
	
	if(new_direction >= 0) {
		if(old_direction == new_direction) {
     d78:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <old_direction>
     d7c:	c8 13       	cpse	r28, r24
     d7e:	13 c0       	rjmp	.+38     	; 0xda6 <joystick_direction+0x72>
			current_time =  get_current_time();
     d80:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
			if(current_time < old_time + 250) {
     d84:	00 91 78 01 	lds	r16, 0x0178	; 0x800178 <old_time>
     d88:	10 91 79 01 	lds	r17, 0x0179	; 0x800179 <old_time+0x1>
     d8c:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <old_time+0x2>
     d90:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <old_time+0x3>
     d94:	06 50       	subi	r16, 0x06	; 6
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	2f 4f       	sbci	r18, 0xFF	; 255
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	60 17       	cp	r22, r16
     d9e:	71 07       	cpc	r23, r17
     da0:	82 07       	cpc	r24, r18
     da2:	93 07       	cpc	r25, r19
     da4:	70 f0       	brcs	.+28     	; 0xdc2 <joystick_direction+0x8e>
				return -1;
			}
		}
			
		old_direction = new_direction;
     da6:	c0 93 7c 01 	sts	0x017C, r28	; 0x80017c <old_direction>
		old_time =  get_current_time();
     daa:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
     dae:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <old_time>
     db2:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <old_time+0x1>
     db6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <old_time+0x2>
     dba:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <old_time+0x3>
		return new_direction;
     dbe:	8c 2f       	mov	r24, r28
     dc0:	01 c0       	rjmp	.+2      	; 0xdc4 <joystick_direction+0x90>
	
	if(new_direction >= 0) {
		if(old_direction == new_direction) {
			current_time =  get_current_time();
			if(current_time < old_time + 250) {
				return -1;
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
		old_time =  get_current_time();
		return new_direction;
	} else {
		return -1;
	}
     dc4:	cf 91       	pop	r28
     dc6:	1f 91       	pop	r17
     dc8:	0f 91       	pop	r16
     dca:	08 95       	ret

00000dcc <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     dcc:	80 e8       	ldi	r24, 0x80	; 128
     dce:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <spi_setup_master>
     dd2:	08 95       	ret

00000dd4 <ledmatrix_update_pixel>:
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	80 31       	cpi	r24, 0x10	; 16
     ddc:	b0 f4       	brcc	.+44     	; 0xe0a <ledmatrix_update_pixel+0x36>
     dde:	68 30       	cpi	r22, 0x08	; 8
     de0:	a0 f4       	brcc	.+40     	; 0xe0a <ledmatrix_update_pixel+0x36>
     de2:	14 2f       	mov	r17, r20
     de4:	c6 2f       	mov	r28, r22
     de6:	d8 2f       	mov	r29, r24
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     dee:	6c 2f       	mov	r22, r28
     df0:	67 70       	andi	r22, 0x07	; 7
     df2:	80 e1       	ldi	r24, 0x10	; 16
     df4:	68 9f       	mul	r22, r24
     df6:	90 01       	movw	r18, r0
     df8:	11 24       	eor	r1, r1
     dfa:	8d 2f       	mov	r24, r29
     dfc:	8f 70       	andi	r24, 0x0F	; 15
     dfe:	82 2b       	or	r24, r18
     e00:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e04:	81 2f       	mov	r24, r17
     e06:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	08 95       	ret

00000e12 <ledmatrix_update_row>:
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	90 f4       	brcc	.+36     	; 0xe42 <ledmatrix_update_row+0x30>
     e1e:	8b 01       	movw	r16, r22
     e20:	c8 2f       	mov	r28, r24
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e28:	8c 2f       	mov	r24, r28
     e2a:	87 70       	andi	r24, 0x07	; 7
     e2c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e30:	e8 01       	movw	r28, r16
     e32:	00 5f       	subi	r16, 0xF0	; 240
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	89 91       	ld	r24, Y+
     e38:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e3c:	c0 17       	cp	r28, r16
     e3e:	d1 07       	cpc	r29, r17
     e40:	d1 f7       	brne	.-12     	; 0xe36 <ledmatrix_update_row+0x24>
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <ledmatrix_update_column>:
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	80 31       	cpi	r24, 0x10	; 16
     e56:	90 f4       	brcc	.+36     	; 0xe7c <ledmatrix_update_column+0x30>
     e58:	8b 01       	movw	r16, r22
     e5a:	c8 2f       	mov	r28, r24
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e62:	8c 2f       	mov	r24, r28
     e64:	8f 70       	andi	r24, 0x0F	; 15
     e66:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e6a:	e8 01       	movw	r28, r16
     e6c:	08 5f       	subi	r16, 0xF8	; 248
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	89 91       	ld	r24, Y+
     e72:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e76:	c0 17       	cp	r28, r16
     e78:	d1 07       	cpc	r29, r17
     e7a:	d1 f7       	brne	.-12     	; 0xe70 <ledmatrix_update_column+0x24>
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <ledmatrix_shift_display_left>:
     e86:	84 e0       	ldi	r24, 0x04	; 4
     e88:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e8c:	82 e0       	ldi	r24, 0x02	; 2
     e8e:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e92:	08 95       	ret

00000e94 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     e94:	8f e0       	ldi	r24, 0x0F	; 15
     e96:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <spi_send_byte>
     e9a:	08 95       	ret

00000e9c <init_level>:
#include <util/delay.h>

uint8_t level;

void init_level(void) {
	level = 0;
     e9c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <level>
     ea0:	08 95       	ret

00000ea2 <add_level>:
}

void add_level(void) {
	level++;
     ea2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <level>
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <level>
     eac:	08 95       	ret

00000eae <get_level>:
}

uint8_t get_level(void) {
	return level;
     eae:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <level>
     eb2:	08 95       	ret

00000eb4 <init_lives_display>:
uint8_t lives = 0;
uint8_t initial_lives = 3;
uint8_t max_lives = 4;

void init_lives_display(void) {
	DDRA |= 0x0F;
     eb4:	81 b1       	in	r24, 0x01	; 1
     eb6:	8f 60       	ori	r24, 0x0F	; 15
     eb8:	81 b9       	out	0x01, r24	; 1
	PORTA &= 0xF0;
     eba:	82 b1       	in	r24, 0x02	; 2
     ebc:	80 7f       	andi	r24, 0xF0	; 240
     ebe:	82 b9       	out	0x02, r24	; 2
     ec0:	08 95       	ret

00000ec2 <no_more_live>:
	
	displayLED_lives();
}

uint8_t no_more_live(void) {
	return (lives == 0);
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <lives>
     ec8:	91 11       	cpse	r25, r1
     eca:	80 e0       	ldi	r24, 0x00	; 0
}
     ecc:	08 95       	ret

00000ece <get_lives>:

uint8_t get_lives(void) {
	return lives;
}
     ece:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lives>
     ed2:	08 95       	ret

00000ed4 <displayLED_lives>:
	 * A1 -> L1
	 * A2 -> L2
	 * A3 -> L3
	 */
	
	PORTA &= 0xF0;
     ed4:	82 b1       	in	r24, 0x02	; 2
     ed6:	80 7f       	andi	r24, 0xF0	; 240
     ed8:	82 b9       	out	0x02, r24	; 2
	
	for(uint8_t i = 0; i < lives;  i++) {
     eda:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lives>
     ede:	88 23       	and	r24, r24
     ee0:	91 f0       	breq	.+36     	; 0xf06 <displayLED_lives+0x32>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
		PORTA |= (1 << i);
     ee4:	41 e0       	ldi	r20, 0x01	; 1
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	92 b1       	in	r25, 0x02	; 2
     eea:	9a 01       	movw	r18, r20
     eec:	08 2e       	mov	r0, r24
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <displayLED_lives+0x20>
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <displayLED_lives+0x1c>
     ef8:	29 2b       	or	r18, r25
     efa:	22 b9       	out	0x02, r18	; 2
	 * A3 -> L3
	 */
	
	PORTA &= 0xF0;
	
	for(uint8_t i = 0; i < lives;  i++) {
     efc:	8f 5f       	subi	r24, 0xFF	; 255
     efe:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <lives>
     f02:	89 17       	cp	r24, r25
     f04:	88 f3       	brcs	.-30     	; 0xee8 <displayLED_lives+0x14>
     f06:	08 95       	ret

00000f08 <init_lives>:
	DDRA |= 0x0F;
	PORTA &= 0xF0;
}

void init_lives(void) {
	lives = initial_lives;
     f08:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <initial_lives>
     f0c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <lives>
	
	displayLED_lives();
     f10:	0e 94 6a 07 	call	0xed4	; 0xed4 <displayLED_lives>
     f14:	08 95       	ret

00000f16 <add_lives>:
}

void add_lives(void) {
	if(lives < max_lives) {
     f16:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lives>
     f1a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <max_lives>
     f1e:	89 17       	cp	r24, r25
     f20:	18 f4       	brcc	.+6      	; 0xf28 <add_lives+0x12>
		lives++;
     f22:	8f 5f       	subi	r24, 0xFF	; 255
     f24:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <lives>
	}
	
	displayLED_lives();
     f28:	0e 94 6a 07 	call	0xed4	; 0xed4 <displayLED_lives>
     f2c:	08 95       	ret

00000f2e <reduce_lives>:
}

void reduce_lives(void) {
	if(lives > 0) {
     f2e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lives>
     f32:	88 23       	and	r24, r24
     f34:	19 f0       	breq	.+6      	; 0xf3c <reduce_lives+0xe>
		lives--;
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <lives>
	}
	
	move_cursor(55,15);
     f3c:	6f e0       	ldi	r22, 0x0F	; 15
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	87 e3       	ldi	r24, 0x37	; 55
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Lives:%10d"), get_lives());
     f48:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <lives>
     f4c:	1f 92       	push	r1
     f4e:	8f 93       	push	r24
     f50:	8c e9       	ldi	r24, 0x9C	; 156
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9f 93       	push	r25
     f56:	8f 93       	push	r24
     f58:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	
	displayLED_lives();
     f5c:	0e 94 6a 07 	call	0xed4	; 0xed4 <displayLED_lives>
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	08 95       	ret

00000f6a <initialise_hardware>:
		}
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     f6a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <ledmatrix_setup>
	init_button_interrupts();
     f6e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	7b e4       	ldi	r23, 0x4B	; 75
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <init_serial_stdio>
	
	init_timer0();
     f80:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <init_timer0>
	
	init_joystick();
     f84:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <init_joystick>
	
	init_lives_display();
     f88:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <init_lives_display>
	
	// Turn on global interrupts
	sei();
     f8c:	78 94       	sei
     f8e:	08 95       	ret

00000f90 <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     f90:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <clear_terminal>
	move_cursor(10,10);
     f94:	6a e0       	ldi	r22, 0x0A	; 10
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	8a e0       	ldi	r24, 0x0A	; 10
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Frogger"));
     fa0:	8b e6       	ldi	r24, 0x6B	; 107
     fa2:	91 e0       	ldi	r25, 0x01	; 1
     fa4:	9f 93       	push	r25
     fa6:	8f 93       	push	r24
     fa8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	move_cursor(10,12);
     fac:	6c e0       	ldi	r22, 0x0C	; 12
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	8a e0       	ldi	r24, 0x0A	; 10
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Wu Lai Yin 44115001"));
     fb8:	8e e3       	ldi	r24, 0x3E	; 62
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	9f 93       	push	r25
     fbe:	8f 93       	push	r24
     fc0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     fc4:	0e 94 4a 07 	call	0xe94	; 0xe94 <ledmatrix_clear>
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("FROGGER 44115001", COLOUR_GREEN);
     fd0:	60 ef       	ldi	r22, 0xF0	; 240
     fd2:	84 e3       	ldi	r24, 0x34	; 52
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     fda:	0d c0       	rjmp	.+26     	; 0xff6 <splash_screen+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fdc:	2f e7       	ldi	r18, 0x7F	; 127
     fde:	89 ea       	ldi	r24, 0xA9	; 169
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	21 50       	subi	r18, 0x01	; 1
     fe4:	80 40       	sbci	r24, 0x00	; 0
     fe6:	90 40       	sbci	r25, 0x00	; 0
     fe8:	e1 f7       	brne	.-8      	; 0xfe2 <splash_screen+0x52>
     fea:	00 c0       	rjmp	.+0      	; 0xfec <splash_screen+0x5c>
     fec:	00 00       	nop
			_delay_ms(150);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     fee:	0e 94 62 01 	call	0x2c4	; 0x2c4 <button_pushed>
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	29 f4       	brne	.+10     	; 0x1000 <splash_screen+0x70>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("FROGGER 44115001", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     ff6:	0e 94 8a 0b 	call	0x1714	; 0x1714 <scroll_display>
     ffa:	81 11       	cpse	r24, r1
     ffc:	ef cf       	rjmp	.-34     	; 0xfdc <splash_screen+0x4c>
     ffe:	e8 cf       	rjmp	.-48     	; 0xfd0 <splash_screen+0x40>
    1000:	08 95       	ret

00001002 <new_game>:
	}
}

void new_game(void) {
	
	game_over = 0;
    1002:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <game_over>
	
	// Initialise the game and display
	initialise_game();
    1006:	0e 94 54 06 	call	0xca8	; 0xca8 <initialise_game>
	
	// Clear the serial terminal
	clear_terminal();
    100a:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <clear_terminal>
	
	// Initialise the level
	init_level();
    100e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <init_level>
	
	// Initialise the score
	init_score();
    1012:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <init_score>
	
	// Initialise the live
	init_lives();
    1016:	0e 94 84 07 	call	0xf08	; 0xf08 <init_lives>
	
	// Initialise the time
	init_count();
    101a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <init_count>
	
	// Start the time clock
	start_counting();
    101e:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <start_counting>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    1022:	0e 94 62 01 	call	0x2c4	; 0x2c4 <button_pushed>
	clear_serial_input_buffer();
    1026:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <clear_serial_input_buffer>
	
	move_cursor(55,14);
    102a:	6e e0       	ldi	r22, 0x0E	; 14
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	87 e3       	ldi	r24, 0x37	; 55
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Score:%10d"), get_score());
    1036:	0e 94 75 0b 	call	0x16ea	; 0x16ea <get_score>
    103a:	9f 93       	push	r25
    103c:	8f 93       	push	r24
    103e:	7f 93       	push	r23
    1040:	6f 93       	push	r22
    1042:	83 e3       	ldi	r24, 0x33	; 51
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	9f 93       	push	r25
    1048:	8f 93       	push	r24
    104a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	
	move_cursor(55,15);
    104e:	6f e0       	ldi	r22, 0x0F	; 15
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	87 e3       	ldi	r24, 0x37	; 55
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Lives:%10d"), get_lives());
    105a:	0e 94 67 07 	call	0xece	; 0xece <get_lives>
    105e:	1f 92       	push	r1
    1060:	8f 93       	push	r24
    1062:	88 e2       	ldi	r24, 0x28	; 40
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	9f 93       	push	r25
    1068:	8f 93       	push	r24
    106a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	
	move_cursor(55,16);
    106e:	60 e1       	ldi	r22, 0x10	; 16
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	87 e3       	ldi	r24, 0x37	; 55
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Level:%10d"), get_level());
    107a:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    107e:	1f 92       	push	r1
    1080:	8f 93       	push	r24
    1082:	8d e1       	ldi	r24, 0x1D	; 29
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	9f 93       	push	r25
    1088:	8f 93       	push	r24
    108a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
}
    108e:	8d b7       	in	r24, 0x3d	; 61
    1090:	9e b7       	in	r25, 0x3e	; 62
    1092:	0e 96       	adiw	r24, 0x0e	; 14
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	9e bf       	out	0x3e, r25	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	8d bf       	out	0x3d, r24	; 61
    109e:	08 95       	ret

000010a0 <play_game>:

void play_game(void) {
    10a0:	2f 92       	push	r2
    10a2:	3f 92       	push	r3
    10a4:	4f 92       	push	r4
    10a6:	5f 92       	push	r5
    10a8:	6f 92       	push	r6
    10aa:	7f 92       	push	r7
    10ac:	8f 92       	push	r8
    10ae:	9f 92       	push	r9
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <play_game+0x26>
    10c6:	1f 92       	push	r1
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t characters_into_escape_sequence = 0;
	uint8_t game_paused = 0;
	
	// Get the current time and remember this as the last time the vehicles
	// and logs were moved.
	current_time = get_current_time();
    10cc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
	
	redraw_whole_display();
    10d0:	0e 94 3a 06 	call	0xc74	; 0xc74 <redraw_whole_display>
	
	put_frog_in_start_position();
    10d4:	0e 94 ca 04 	call	0x994	; 0x994 <put_frog_in_start_position>
	
	count_set(INIT_TIME);
    10d8:	8e e1       	ldi	r24, 0x1E	; 30
    10da:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <count_set>
	
	int8_t joystick;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	uint8_t game_paused = 0;
    10de:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t current_time;
	
	int8_t joystick;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    10e0:	19 82       	std	Y+1, r1	; 0x01
		// do nothing
		
		current_time = get_current_time();
		
		if(!is_frog_dead() && !game_paused) {
			if(current_time % (1000 + (100 * get_level())) == 0) {
    10e2:	0f 2e       	mov	r0, r31
    10e4:	f4 e6       	ldi	r31, 0x64	; 100
    10e6:	3f 2e       	mov	r3, r31
    10e8:	f0 2d       	mov	r31, r0
				// 1000ms (1 second) has passed since the last time we moved
				// the vehicles and logs - move them again and keep track of
				// the time when we did this.
				scroll_vehicle_lane(0, 1);
				//last_move_time = current_time;
			} else if(current_time % (1100 + (50 * get_level())) == 0) {
    10ea:	0f 2e       	mov	r0, r31
    10ec:	f2 e3       	ldi	r31, 0x32	; 50
    10ee:	2f 2e       	mov	r2, r31
    10f0:	f0 2d       	mov	r31, r0
    10f2:	00 e0       	ldi	r16, 0x00	; 0
					start_counting();
					
				} else {
					game_paused = 1;
					move_cursor(10,14);
					printf_P(PSTR("GAME PAUSED"));
    10f4:	0f 2e       	mov	r0, r31
    10f6:	f0 ef       	ldi	r31, 0xF0	; 240
    10f8:	af 2e       	mov	r10, r31
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	bf 2e       	mov	r11, r31
    10fe:	f0 2d       	mov	r31, r0
			if(game_paused) {
					game_paused = 0;
					clear_terminal();
					
					move_cursor(55,14);
					printf_P(PSTR("Score:%10d"), get_score());
    1100:	0f 2e       	mov	r0, r31
    1102:	f2 e1       	ldi	r31, 0x12	; 18
    1104:	cf 2e       	mov	r12, r31
    1106:	f1 e0       	ldi	r31, 0x01	; 1
    1108:	df 2e       	mov	r13, r31
    110a:	f0 2d       	mov	r31, r0
					
					move_cursor(55,15);
					printf_P(PSTR("Lives:%10d"), get_lives());
    110c:	0f 2e       	mov	r0, r31
    110e:	f7 e0       	ldi	r31, 0x07	; 7
    1110:	ef 2e       	mov	r14, r31
    1112:	f1 e0       	ldi	r31, 0x01	; 1
    1114:	ff 2e       	mov	r15, r31
    1116:	f0 2d       	mov	r31, r0
		
		if(button == NO_BUTTON_PUSHED) {
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1118:	0f 2e       	mov	r0, r31
    111a:	fe ea       	ldi	r31, 0xAE	; 174
    111c:	8f 2e       	mov	r8, r31
    111e:	f2 e0       	ldi	r31, 0x02	; 2
    1120:	9f 2e       	mov	r9, r31
    1122:	f0 2d       	mov	r31, r0
	
	count_set(INIT_TIME);
	
	// We play the game while the frog is alive and we haven't filled up the 
	// far riverbank
	while(!no_more_live() && !is_riverbank_full()) {
    1124:	8c c1       	rjmp	.+792    	; 0x143e <play_game+0x39e>
		if(!is_frog_dead() && frog_has_reached_riverbank()) {
    1126:	0e 94 ad 05 	call	0xb5a	; 0xb5a <is_frog_dead>
    112a:	81 11       	cpse	r24, r1
    112c:	0d c0       	rjmp	.+26     	; 0x1148 <play_game+0xa8>
    112e:	0e 94 a6 05 	call	0xb4c	; 0xb4c <frog_has_reached_riverbank>
    1132:	88 23       	and	r24, r24
    1134:	49 f0       	breq	.+18     	; 0x1148 <play_game+0xa8>
			// Frog reached the other side successfully but the
			// riverbank isn't full, put a new frog at the start
			
			add_to_score(10);
    1136:	8a e0       	ldi	r24, 0x0A	; 10
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <add_to_score>
			put_frog_in_start_position();
    113e:	0e 94 ca 04 	call	0x994	; 0x994 <put_frog_in_start_position>
			count_set(INIT_TIME);
    1142:	8e e1       	ldi	r24, 0x1E	; 30
    1144:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <count_set>
		}
		
		if(count_end()) {
    1148:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <count_end>
    114c:	81 11       	cpse	r24, r1
			kill_frog();
    114e:	0e 94 b0 05 	call	0xb60	; 0xb60 <kill_frog>
		}
		
		if(is_frog_dead()) {
    1152:	0e 94 ad 05 	call	0xb5a	; 0xb5a <is_frog_dead>
    1156:	88 23       	and	r24, r24
    1158:	21 f0       	breq	.+8      	; 0x1162 <play_game+0xc2>
			reduce_lives();
    115a:	0e 94 97 07 	call	0xf2e	; 0xf2e <reduce_lives>
			put_frog_in_start_position();
    115e:	0e 94 ca 04 	call	0x994	; 0x994 <put_frog_in_start_position>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
    1162:	0e 94 62 01 	call	0x2c4	; 0x2c4 <button_pushed>
    1166:	18 2f       	mov	r17, r24
		
		if(button == NO_BUTTON_PUSHED) {
    1168:	8f 3f       	cpi	r24, 0xFF	; 255
    116a:	f9 f4       	brne	.+62     	; 0x11aa <play_game+0x10a>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    116c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <serial_input_available>
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <play_game+0xd6>
    1174:	80 c1       	rjmp	.+768    	; 0x1476 <play_game+0x3d6>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1176:	f4 01       	movw	r30, r8
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <fgetc>
    1180:	8b 83       	std	Y+3, r24	; 0x03
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1182:	f9 81       	ldd	r31, Y+1	; 0x01
    1184:	f1 11       	cpse	r31, r1
    1186:	03 c0       	rjmp	.+6      	; 0x118e <play_game+0xee>
    1188:	8b 31       	cpi	r24, 0x1B	; 27
    118a:	89 f4       	brne	.+34     	; 0x11ae <play_game+0x10e>
    118c:	6f c1       	rjmp	.+734    	; 0x146c <play_game+0x3cc>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    118e:	29 81       	ldd	r18, Y+1	; 0x01
    1190:	21 30       	cpi	r18, 0x01	; 1
    1192:	31 f4       	brne	.+12     	; 0x11a0 <play_game+0x100>
    1194:	3b 81       	ldd	r19, Y+3	; 0x03
    1196:	3b 35       	cpi	r19, 0x5B	; 91
    1198:	09 f4       	brne	.+2      	; 0x119c <play_game+0xfc>
    119a:	6b c1       	rjmp	.+726    	; 0x1472 <play_game+0x3d2>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    119c:	09 83       	std	Y+1, r16	; 0x01
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <play_game+0x10e>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	82 30       	cpi	r24, 0x02	; 2
    11a4:	09 f4       	brne	.+2      	; 0x11a8 <play_game+0x108>
    11a6:	55 c1       	rjmp	.+682    	; 0x1452 <play_game+0x3b2>
    11a8:	5b c1       	rjmp	.+694    	; 0x1460 <play_game+0x3c0>
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
    11ac:	9b 83       	std	Y+3, r25	; 0x03
					characters_into_escape_sequence = 0;
				}
			}
		}
		
		joystick = joystick_direction();
    11ae:	0e 94 9a 06 	call	0xd34	; 0xd34 <joystick_direction>
		
		if(!game_paused) {
    11b2:	ea 81       	ldd	r30, Y+2	; 0x02
    11b4:	e1 11       	cpse	r30, r1
    11b6:	65 c1       	rjmp	.+714    	; 0x1482 <play_game+0x3e2>
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==3) {
    11b8:	13 30       	cpi	r17, 0x03	; 3
    11ba:	11 f4       	brne	.+4      	; 0x11c0 <play_game+0x120>
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <play_game+0x13c>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    11be:	09 83       	std	Y+1, r16	; 0x01
		
		joystick = joystick_direction();
		
		if(!game_paused) {
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==3) {
    11c0:	9b 81       	ldd	r25, Y+3	; 0x03
    11c2:	9f 7d       	andi	r25, 0xDF	; 223
    11c4:	9c 34       	cpi	r25, 0x4C	; 76
    11c6:	51 f0       	breq	.+20     	; 0x11dc <play_game+0x13c>
    11c8:	9f ef       	ldi	r25, 0xFF	; 255
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	51 f4       	brne	.+20     	; 0x11e2 <play_game+0x142>
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <play_game+0x13c>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    11d0:	09 83       	std	Y+1, r16	; 0x01
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    11d2:	ff ef       	ldi	r31, 0xFF	; 255
    11d4:	fb 83       	std	Y+3, r31	; 0x03
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <play_game+0x13c>
		
		joystick = joystick_direction();
		
		if(!game_paused) {
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==3) {
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
    11da:	2b 83       	std	Y+3, r18	; 0x03
				// Attempt to move left
				move_frog_to_left();
    11dc:	0e 94 3c 05 	call	0xa78	; 0xa78 <move_frog_to_left>
    11e0:	54 c1       	rjmp	.+680    	; 0x148a <play_game+0x3ea>
			} else if(button==2 || escape_sequence_char=='A' || serial_input=='U' || serial_input=='u' || joystick==0) {
    11e2:	12 30       	cpi	r17, 0x02	; 2
    11e4:	41 f0       	breq	.+16     	; 0x11f6 <play_game+0x156>
    11e6:	91 34       	cpi	r25, 0x41	; 65
    11e8:	31 f0       	breq	.+12     	; 0x11f6 <play_game+0x156>
    11ea:	2b 81       	ldd	r18, Y+3	; 0x03
    11ec:	2f 7d       	andi	r18, 0xDF	; 223
    11ee:	25 35       	cpi	r18, 0x55	; 85
    11f0:	11 f0       	breq	.+4      	; 0x11f6 <play_game+0x156>
    11f2:	81 11       	cpse	r24, r1
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <play_game+0x15c>
				// Attempt to move forward
				move_frog_forward();
    11f6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <move_frog_forward>
    11fa:	47 c1       	rjmp	.+654    	; 0x148a <play_game+0x3ea>
			} else if(button==1 || escape_sequence_char=='B' || serial_input=='D' || serial_input=='d' || joystick==2) {
    11fc:	11 30       	cpi	r17, 0x01	; 1
    11fe:	31 f0       	breq	.+12     	; 0x120c <play_game+0x16c>
    1200:	92 34       	cpi	r25, 0x42	; 66
    1202:	21 f0       	breq	.+8      	; 0x120c <play_game+0x16c>
    1204:	24 34       	cpi	r18, 0x44	; 68
    1206:	11 f0       	breq	.+4      	; 0x120c <play_game+0x16c>
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	19 f4       	brne	.+6      	; 0x1212 <play_game+0x172>
				// Attempt to move down
				move_frog_backward();
    120c:	0e 94 0c 05 	call	0xa18	; 0xa18 <move_frog_backward>
    1210:	3c c1       	rjmp	.+632    	; 0x148a <play_game+0x3ea>
			} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r' || joystick==1) {
    1212:	11 23       	and	r17, r17
    1214:	31 f0       	breq	.+12     	; 0x1222 <play_game+0x182>
    1216:	93 34       	cpi	r25, 0x43	; 67
    1218:	21 f0       	breq	.+8      	; 0x1222 <play_game+0x182>
    121a:	22 35       	cpi	r18, 0x52	; 82
    121c:	11 f0       	breq	.+4      	; 0x1222 <play_game+0x182>
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	19 f4       	brne	.+6      	; 0x1228 <play_game+0x188>
				// Attempt to move right
				move_frog_to_right();
    1222:	0e 94 6c 05 	call	0xad8	; 0xad8 <move_frog_to_right>
    1226:	31 c1       	rjmp	.+610    	; 0x148a <play_game+0x3ea>
			} else {
				switch (can_button_repeat()) {
    1228:	0e 94 8f 01 	call	0x31e	; 0x31e <can_button_repeat>
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	71 f0       	breq	.+28     	; 0x124c <play_game+0x1ac>
    1230:	1c f4       	brge	.+6      	; 0x1238 <play_game+0x198>
    1232:	88 23       	and	r24, r24
    1234:	71 f0       	breq	.+28     	; 0x1252 <play_game+0x1b2>
    1236:	10 c0       	rjmp	.+32     	; 0x1258 <play_game+0x1b8>
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	29 f0       	breq	.+10     	; 0x1246 <play_game+0x1a6>
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	61 f4       	brne	.+24     	; 0x1258 <play_game+0x1b8>
					case 3:
						move_frog_to_left();
    1240:	0e 94 3c 05 	call	0xa78	; 0xa78 <move_frog_to_left>
						break;
    1244:	22 c1       	rjmp	.+580    	; 0x148a <play_game+0x3ea>
					case 2:
						move_frog_forward();
    1246:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <move_frog_forward>
						break;
    124a:	1f c1       	rjmp	.+574    	; 0x148a <play_game+0x3ea>
					case 1:
						move_frog_backward();
    124c:	0e 94 0c 05 	call	0xa18	; 0xa18 <move_frog_backward>
						break;
    1250:	1c c1       	rjmp	.+568    	; 0x148a <play_game+0x3ea>
					case 0:
						move_frog_to_right();
    1252:	0e 94 6c 05 	call	0xad8	; 0xad8 <move_frog_to_right>
						break;
    1256:	19 c1       	rjmp	.+562    	; 0x148a <play_game+0x3ea>
				}
			}
		}
		
		
		if(serial_input == 'p' || serial_input == 'P') {
    1258:	3b 81       	ldd	r19, Y+3	; 0x03
    125a:	30 37       	cpi	r19, 0x70	; 112
    125c:	21 f0       	breq	.+8      	; 0x1266 <play_game+0x1c6>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	80 35       	cpi	r24, 0x50	; 80
    1262:	09 f0       	breq	.+2      	; 0x1266 <play_game+0x1c6>
    1264:	5c c0       	rjmp	.+184    	; 0x131e <play_game+0x27e>
			// Pause/unpause the game until 'p' or 'P' is pressed again
			if(game_paused) {
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	99 23       	and	r25, r25
    126a:	09 f4       	brne	.+2      	; 0x126e <play_game+0x1ce>
    126c:	43 c0       	rjmp	.+134    	; 0x12f4 <play_game+0x254>
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <play_game+0x1d2>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    1270:	09 83       	std	Y+1, r16	; 0x01
		
		if(serial_input == 'p' || serial_input == 'P') {
			// Pause/unpause the game until 'p' or 'P' is pressed again
			if(game_paused) {
					game_paused = 0;
					clear_terminal();
    1272:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <clear_terminal>
					
					move_cursor(55,14);
    1276:	6e e0       	ldi	r22, 0x0E	; 14
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	87 e3       	ldi	r24, 0x37	; 55
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
					printf_P(PSTR("Score:%10d"), get_score());
    1282:	0e 94 75 0b 	call	0x16ea	; 0x16ea <get_score>
    1286:	9f 93       	push	r25
    1288:	8f 93       	push	r24
    128a:	7f 93       	push	r23
    128c:	6f 93       	push	r22
    128e:	df 92       	push	r13
    1290:	cf 92       	push	r12
    1292:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
					
					move_cursor(55,15);
    1296:	6f e0       	ldi	r22, 0x0F	; 15
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	87 e3       	ldi	r24, 0x37	; 55
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
					printf_P(PSTR("Lives:%10d"), get_lives());
    12a2:	0e 94 67 07 	call	0xece	; 0xece <get_lives>
    12a6:	1f 92       	push	r1
    12a8:	8f 93       	push	r24
    12aa:	ff 92       	push	r15
    12ac:	ef 92       	push	r14
    12ae:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
					
					move_cursor(55,16);
    12b2:	60 e1       	ldi	r22, 0x10	; 16
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	87 e3       	ldi	r24, 0x37	; 55
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
					printf_P(PSTR("Level:%10d"), get_level());
    12be:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    12c2:	1f 92       	push	r1
    12c4:	8f 93       	push	r24
    12c6:	ec ef       	ldi	r30, 0xFC	; 252
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	ff 93       	push	r31
    12cc:	ef 93       	push	r30
    12ce:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
					
					start_counting();
    12d2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <start_counting>
				}
		}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
    12d6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
    12da:	2b 01       	movw	r4, r22
    12dc:	3c 01       	movw	r6, r24
		
		if(!is_frog_dead() && !game_paused) {
    12de:	0e 94 ad 05 	call	0xb5a	; 0xb5a <is_frog_dead>
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	88 23       	and	r24, r24
    12ee:	11 f1       	breq	.+68     	; 0x1334 <play_game+0x294>
		
		
		if(serial_input == 'p' || serial_input == 'P') {
			// Pause/unpause the game until 'p' or 'P' is pressed again
			if(game_paused) {
					game_paused = 0;
    12f0:	0a 83       	std	Y+2, r16	; 0x02
    12f2:	a3 c0       	rjmp	.+326    	; 0x143a <play_game+0x39a>
					
					start_counting();
					
				} else {
					game_paused = 1;
					move_cursor(10,14);
    12f4:	6e e0       	ldi	r22, 0x0E	; 14
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	8a e0       	ldi	r24, 0x0A	; 10
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
					printf_P(PSTR("GAME PAUSED"));
    1300:	bf 92       	push	r11
    1302:	af 92       	push	r10
    1304:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
					
					stop_counting();
    1308:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <stop_counting>
				}
		}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
    130c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
		
		if(!is_frog_dead() && !game_paused) {
    1310:	0e 94 ad 05 	call	0xb5a	; 0xb5a <is_frog_dead>
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
					printf_P(PSTR("Level:%10d"), get_level());
					
					start_counting();
					
				} else {
					game_paused = 1;
    1318:	f1 e0       	ldi	r31, 0x01	; 1
    131a:	fa 83       	std	Y+2, r31	; 0x02
    131c:	8e c0       	rjmp	.+284    	; 0x143a <play_game+0x39a>
				}
		}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
    131e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <get_current_time>
    1322:	2b 01       	movw	r4, r22
    1324:	3c 01       	movw	r6, r24
		
		if(!is_frog_dead() && !game_paused) {
    1326:	0e 94 ad 05 	call	0xb5a	; 0xb5a <is_frog_dead>
    132a:	81 11       	cpse	r24, r1
    132c:	86 c0       	rjmp	.+268    	; 0x143a <play_game+0x39a>
    132e:	2a 81       	ldd	r18, Y+2	; 0x02
    1330:	21 11       	cpse	r18, r1
    1332:	83 c0       	rjmp	.+262    	; 0x143a <play_game+0x39a>
			if(current_time % (1000 + (100 * get_level())) == 0) {
    1334:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    1338:	38 9e       	mul	r3, r24
    133a:	c0 01       	movw	r24, r0
    133c:	11 24       	eor	r1, r1
    133e:	9c 01       	movw	r18, r24
    1340:	28 51       	subi	r18, 0x18	; 24
    1342:	3c 4f       	sbci	r19, 0xFC	; 252
    1344:	03 2e       	mov	r0, r19
    1346:	00 0c       	add	r0, r0
    1348:	44 0b       	sbc	r20, r20
    134a:	55 0b       	sbc	r21, r21
    134c:	c3 01       	movw	r24, r6
    134e:	b2 01       	movw	r22, r4
    1350:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1354:	67 2b       	or	r22, r23
    1356:	68 2b       	or	r22, r24
    1358:	69 2b       	or	r22, r25
    135a:	31 f4       	brne	.+12     	; 0x1368 <play_game+0x2c8>
				// 1000ms (1 second) has passed since the last time we moved
				// the vehicles and logs - move them again and keep track of
				// the time when we did this.
				scroll_vehicle_lane(0, 1);
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	80 2f       	mov	r24, r16
    1360:	0e 94 b4 05 	call	0xb68	; 0xb68 <scroll_vehicle_lane>
    1364:	0a 83       	std	Y+2, r16	; 0x02
    1366:	69 c0       	rjmp	.+210    	; 0x143a <play_game+0x39a>
				//last_move_time = current_time;
			} else if(current_time % (1100 + (50 * get_level())) == 0) {
    1368:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    136c:	28 9e       	mul	r2, r24
    136e:	c0 01       	movw	r24, r0
    1370:	11 24       	eor	r1, r1
    1372:	9c 01       	movw	r18, r24
    1374:	24 5b       	subi	r18, 0xB4	; 180
    1376:	3b 4f       	sbci	r19, 0xFB	; 251
    1378:	03 2e       	mov	r0, r19
    137a:	00 0c       	add	r0, r0
    137c:	44 0b       	sbc	r20, r20
    137e:	55 0b       	sbc	r21, r21
    1380:	c3 01       	movw	r24, r6
    1382:	b2 01       	movw	r22, r4
    1384:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1388:	67 2b       	or	r22, r23
    138a:	68 2b       	or	r22, r24
    138c:	69 2b       	or	r22, r25
    138e:	31 f4       	brne	.+12     	; 0x139c <play_game+0x2fc>
				scroll_vehicle_lane(1, -1);
    1390:	6f ef       	ldi	r22, 0xFF	; 255
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	0e 94 b4 05 	call	0xb68	; 0xb68 <scroll_vehicle_lane>
    1398:	0a 83       	std	Y+2, r16	; 0x02
    139a:	4f c0       	rjmp	.+158    	; 0x143a <play_game+0x39a>
				//last_move_time1 = current_time;
			} else if(current_time % (800 + (50 * get_level())) == 0) {
    139c:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    13a0:	28 9e       	mul	r2, r24
    13a2:	c0 01       	movw	r24, r0
    13a4:	11 24       	eor	r1, r1
    13a6:	9c 01       	movw	r18, r24
    13a8:	20 5e       	subi	r18, 0xE0	; 224
    13aa:	3c 4f       	sbci	r19, 0xFC	; 252
    13ac:	03 2e       	mov	r0, r19
    13ae:	00 0c       	add	r0, r0
    13b0:	44 0b       	sbc	r20, r20
    13b2:	55 0b       	sbc	r21, r21
    13b4:	c3 01       	movw	r24, r6
    13b6:	b2 01       	movw	r22, r4
    13b8:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    13bc:	67 2b       	or	r22, r23
    13be:	68 2b       	or	r22, r24
    13c0:	69 2b       	or	r22, r25
    13c2:	31 f4       	brne	.+12     	; 0x13d0 <play_game+0x330>
				scroll_vehicle_lane(2, 1);
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	82 e0       	ldi	r24, 0x02	; 2
    13c8:	0e 94 b4 05 	call	0xb68	; 0xb68 <scroll_vehicle_lane>
    13cc:	0a 83       	std	Y+2, r16	; 0x02
    13ce:	35 c0       	rjmp	.+106    	; 0x143a <play_game+0x39a>
				//last_move_time2 = current_time;
			} else if(current_time % (900 + (50 * get_level())) == 0) {
    13d0:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    13d4:	28 9e       	mul	r2, r24
    13d6:	c0 01       	movw	r24, r0
    13d8:	11 24       	eor	r1, r1
    13da:	9c 01       	movw	r18, r24
    13dc:	2c 57       	subi	r18, 0x7C	; 124
    13de:	3c 4f       	sbci	r19, 0xFC	; 252
    13e0:	03 2e       	mov	r0, r19
    13e2:	00 0c       	add	r0, r0
    13e4:	44 0b       	sbc	r20, r20
    13e6:	55 0b       	sbc	r21, r21
    13e8:	c3 01       	movw	r24, r6
    13ea:	b2 01       	movw	r22, r4
    13ec:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    13f0:	67 2b       	or	r22, r23
    13f2:	68 2b       	or	r22, r24
    13f4:	69 2b       	or	r22, r25
    13f6:	31 f4       	brne	.+12     	; 0x1404 <play_game+0x364>
				scroll_river_channel(0, -1);
    13f8:	6f ef       	ldi	r22, 0xFF	; 255
    13fa:	80 2f       	mov	r24, r16
    13fc:	0e 94 ed 05 	call	0xbda	; 0xbda <scroll_river_channel>
    1400:	0a 83       	std	Y+2, r16	; 0x02
    1402:	1b c0       	rjmp	.+54     	; 0x143a <play_game+0x39a>
				//last_move_time3 = current_time;
			} else if(current_time % (1150 + (50 * get_level())) == 0) {
    1404:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    1408:	28 9e       	mul	r2, r24
    140a:	c0 01       	movw	r24, r0
    140c:	11 24       	eor	r1, r1
    140e:	9c 01       	movw	r18, r24
    1410:	22 58       	subi	r18, 0x82	; 130
    1412:	3b 4f       	sbci	r19, 0xFB	; 251
    1414:	03 2e       	mov	r0, r19
    1416:	00 0c       	add	r0, r0
    1418:	44 0b       	sbc	r20, r20
    141a:	55 0b       	sbc	r21, r21
    141c:	c3 01       	movw	r24, r6
    141e:	b2 01       	movw	r22, r4
    1420:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1424:	67 2b       	or	r22, r23
    1426:	68 2b       	or	r22, r24
    1428:	69 2b       	or	r22, r25
    142a:	31 f4       	brne	.+12     	; 0x1438 <play_game+0x398>
				scroll_river_channel(1, 1);
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	0e 94 ed 05 	call	0xbda	; 0xbda <scroll_river_channel>
    1434:	0a 83       	std	Y+2, r16	; 0x02
    1436:	01 c0       	rjmp	.+2      	; 0x143a <play_game+0x39a>
    1438:	0a 83       	std	Y+2, r16	; 0x02
				//last_move_time4 = current_time;
			}
		}
		displayLED_lives();
    143a:	0e 94 6a 07 	call	0xed4	; 0xed4 <displayLED_lives>
	
	count_set(INIT_TIME);
	
	// We play the game while the frog is alive and we haven't filled up the 
	// far riverbank
	while(!no_more_live() && !is_riverbank_full()) {
    143e:	0e 94 61 07 	call	0xec2	; 0xec2 <no_more_live>
    1442:	81 11       	cpse	r24, r1
    1444:	44 c0       	rjmp	.+136    	; 0x14ce <play_game+0x42e>
    1446:	0e 94 9c 05 	call	0xb38	; 0xb38 <is_riverbank_full>
    144a:	88 23       	and	r24, r24
    144c:	09 f4       	brne	.+2      	; 0x1450 <play_game+0x3b0>
    144e:	6b ce       	rjmp	.-810    	; 0x1126 <play_game+0x86>
    1450:	3e c0       	rjmp	.+124    	; 0x14ce <play_game+0x42e>
					characters_into_escape_sequence = 0;
				}
			}
		}
		
		joystick = joystick_direction();
    1452:	0e 94 9a 06 	call	0xd34	; 0xd34 <joystick_direction>
		
		if(!game_paused) {
    1456:	3a 81       	ldd	r19, Y+2	; 0x02
    1458:	33 23       	and	r19, r19
    145a:	e1 f0       	breq	.+56     	; 0x1494 <play_game+0x3f4>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    145c:	09 83       	std	Y+1, r16	; 0x01
    145e:	29 c0       	rjmp	.+82     	; 0x14b2 <play_game+0x412>
					characters_into_escape_sequence = 0;
				}
			}
		}
		
		joystick = joystick_direction();
    1460:	0e 94 9a 06 	call	0xd34	; 0xd34 <joystick_direction>
		
		if(!game_paused) {
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	91 11       	cpse	r25, r1
    1468:	27 c0       	rjmp	.+78     	; 0x14b8 <play_game+0x418>
    146a:	a9 ce       	rjmp	.-686    	; 0x11be <play_game+0x11e>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    146c:	e1 e0       	ldi	r30, 0x01	; 1
    146e:	e9 83       	std	Y+1, r30	; 0x01
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <play_game+0x3d6>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1472:	f2 e0       	ldi	r31, 0x02	; 2
    1474:	f9 83       	std	Y+1, r31	; 0x01
					characters_into_escape_sequence = 0;
				}
			}
		}
		
		joystick = joystick_direction();
    1476:	0e 94 9a 06 	call	0xd34	; 0xd34 <joystick_direction>
		
		if(!game_paused) {
    147a:	2a 81       	ldd	r18, Y+2	; 0x02
    147c:	22 23       	and	r18, r18
    147e:	91 f0       	breq	.+36     	; 0x14a4 <play_game+0x404>
    1480:	18 c0       	rjmp	.+48     	; 0x14b2 <play_game+0x412>
				}
			}
		}
		
		
		if(serial_input == 'p' || serial_input == 'P') {
    1482:	3b 81       	ldd	r19, Y+3	; 0x03
    1484:	30 37       	cpi	r19, 0x70	; 112
    1486:	f1 f4       	brne	.+60     	; 0x14c4 <play_game+0x424>
    1488:	f4 ce       	rjmp	.-536    	; 0x1272 <play_game+0x1d2>
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	80 37       	cpi	r24, 0x70	; 112
    148e:	09 f0       	breq	.+2      	; 0x1492 <play_game+0x3f2>
    1490:	e6 ce       	rjmp	.-564    	; 0x125e <play_game+0x1be>
    1492:	30 cf       	rjmp	.-416    	; 0x12f4 <play_game+0x254>
		
		joystick = joystick_direction();
		
		if(!game_paused) {
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==3) {
    1494:	9b 81       	ldd	r25, Y+3	; 0x03
    1496:	94 34       	cpi	r25, 0x44	; 68
    1498:	09 f4       	brne	.+2      	; 0x149c <play_game+0x3fc>
    149a:	9a ce       	rjmp	.-716    	; 0x11d0 <play_game+0x130>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    149c:	09 83       	std	Y+1, r16	; 0x01
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    149e:	ef ef       	ldi	r30, 0xFF	; 255
    14a0:	eb 83       	std	Y+3, r30	; 0x03
    14a2:	93 ce       	rjmp	.-730    	; 0x11ca <play_game+0x12a>
		
		joystick = joystick_direction();
		
		if(!game_paused) {
			// Process the input. 
			if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==3) {
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	09 f4       	brne	.+2      	; 0x14aa <play_game+0x40a>
    14a8:	97 ce       	rjmp	.-722    	; 0x11d8 <play_game+0x138>
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	ff ef       	ldi	r31, 0xFF	; 255
    14ae:	fb 83       	std	Y+3, r31	; 0x03
    14b0:	9c ce       	rjmp	.-712    	; 0x11ea <play_game+0x14a>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    14b2:	2f ef       	ldi	r18, 0xFF	; 255
    14b4:	2b 83       	std	Y+3, r18	; 0x03
    14b6:	d3 ce       	rjmp	.-602    	; 0x125e <play_game+0x1be>
				}
			}
		}
		
		
		if(serial_input == 'p' || serial_input == 'P') {
    14b8:	3b 81       	ldd	r19, Y+3	; 0x03
    14ba:	30 37       	cpi	r19, 0x70	; 112
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <play_game+0x420>
    14be:	d8 ce       	rjmp	.-592    	; 0x1270 <play_game+0x1d0>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    14c0:	09 83       	std	Y+1, r16	; 0x01
    14c2:	cd ce       	rjmp	.-614    	; 0x125e <play_game+0x1be>
				}
			}
		}
		
		
		if(serial_input == 'p' || serial_input == 'P') {
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	80 35       	cpi	r24, 0x50	; 80
    14c8:	09 f0       	breq	.+2      	; 0x14cc <play_game+0x42c>
    14ca:	29 cf       	rjmp	.-430    	; 0x131e <play_game+0x27e>
    14cc:	d2 ce       	rjmp	.-604    	; 0x1272 <play_game+0x1d2>
		}
		displayLED_lives();
	}
	// We get here if the frog is dead or the riverbank is full
	// The game is over.
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	cf 90       	pop	r12
    14e4:	bf 90       	pop	r11
    14e6:	af 90       	pop	r10
    14e8:	9f 90       	pop	r9
    14ea:	8f 90       	pop	r8
    14ec:	7f 90       	pop	r7
    14ee:	6f 90       	pop	r6
    14f0:	5f 90       	pop	r5
    14f2:	4f 90       	pop	r4
    14f4:	3f 90       	pop	r3
    14f6:	2f 90       	pop	r2
    14f8:	08 95       	ret

000014fa <next_level>:

void next_level(void) {
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	28 97       	sbiw	r28, 0x08	; 8
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
	count_clear();
    1512:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <count_clear>
	add_level();
    1516:	0e 94 51 07 	call	0xea2	; 0xea2 <add_level>
	if(get_level() > 1) {
    151a:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	10 f0       	brcs	.+4      	; 0x1526 <next_level+0x2c>
		add_lives();
    1522:	0e 94 8b 07 	call	0xf16	; 0xf16 <add_lives>
	}
	
	clear_terminal();
    1526:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <clear_terminal>
	move_cursor(55,16);
    152a:	60 e1       	ldi	r22, 0x10	; 16
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	87 e3       	ldi	r24, 0x37	; 55
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Level:%10d"), get_level());
    1536:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    153a:	1f 92       	push	r1
    153c:	8f 93       	push	r24
    153e:	85 ee       	ldi	r24, 0xE5	; 229
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9f 93       	push	r25
    1544:	8f 93       	push	r24
    1546:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	
	move_cursor(55,15);
    154a:	6f e0       	ldi	r22, 0x0F	; 15
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	87 e3       	ldi	r24, 0x37	; 55
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Lives:%10d"), get_lives());
    1556:	0e 94 67 07 	call	0xece	; 0xece <get_lives>
    155a:	1f 92       	push	r1
    155c:	8f 93       	push	r24
    155e:	8a ed       	ldi	r24, 0xDA	; 218
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9f 93       	push	r25
    1564:	8f 93       	push	r24
    1566:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	
	move_cursor(55,14);
    156a:	6e e0       	ldi	r22, 0x0E	; 14
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	87 e3       	ldi	r24, 0x37	; 55
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Score:%10d"), get_score());
    1576:	0e 94 75 0b 	call	0x16ea	; 0x16ea <get_score>
    157a:	9f 93       	push	r25
    157c:	8f 93       	push	r24
    157e:	7f 93       	push	r23
    1580:	6f 93       	push	r22
    1582:	8f ec       	ldi	r24, 0xCF	; 207
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9f 93       	push	r25
    1588:	8f 93       	push	r24
    158a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	
	ledmatrix_clear();
    158e:	0e 94 4a 07 	call	0xe94	; 0xe94 <ledmatrix_clear>
	
	char level_txt[8];
	sprintf(level_txt, "LEVEL %i", get_level());
    1592:	0e 94 57 07 	call	0xeae	; 0xeae <get_level>
    1596:	1f 92       	push	r1
    1598:	8f 93       	push	r24
    159a:	85 e4       	ldi	r24, 0x45	; 69
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	9f 93       	push	r25
    15a0:	8f 93       	push	r24
    15a2:	8e 01       	movw	r16, r28
    15a4:	0f 5f       	subi	r16, 0xFF	; 255
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	1f 93       	push	r17
    15aa:	0f 93       	push	r16
    15ac:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <sprintf>
	set_scrolling_display_text(level_txt, COLOUR_YELLOW);
    15b0:	6f ed       	ldi	r22, 0xDF	; 223
    15b2:	c8 01       	movw	r24, r16
    15b4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_scrolling_display_text>
	
	while(scroll_display()) {
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	10 c0       	rjmp	.+32     	; 0x15e4 <next_level+0xea>
		if (button_pushed() != NO_BUTTON_PUSHED) {
    15c4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <button_pushed>
    15c8:	8f 3f       	cpi	r24, 0xFF	; 255
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <next_level+0xd8>
			initialise_game();
    15cc:	0e 94 54 06 	call	0xca8	; 0xca8 <initialise_game>
			break;
    15d0:	0d c0       	rjmp	.+26     	; 0x15ec <next_level+0xf2>
    15d2:	9f e7       	ldi	r25, 0x7F	; 127
    15d4:	29 ea       	ldi	r18, 0xA9	; 169
    15d6:	83 e0       	ldi	r24, 0x03	; 3
    15d8:	91 50       	subi	r25, 0x01	; 1
    15da:	20 40       	sbci	r18, 0x00	; 0
    15dc:	80 40       	sbci	r24, 0x00	; 0
    15de:	e1 f7       	brne	.-8      	; 0x15d8 <next_level+0xde>
    15e0:	00 c0       	rjmp	.+0      	; 0x15e2 <next_level+0xe8>
    15e2:	00 00       	nop
	
	char level_txt[8];
	sprintf(level_txt, "LEVEL %i", get_level());
	set_scrolling_display_text(level_txt, COLOUR_YELLOW);
	
	while(scroll_display()) {
    15e4:	0e 94 8a 0b 	call	0x1714	; 0x1714 <scroll_display>
    15e8:	81 11       	cpse	r24, r1
    15ea:	ec cf       	rjmp	.-40     	; 0x15c4 <next_level+0xca>
			initialise_game();
			break;
		}
		_delay_ms(150);
	}
}
    15ec:	28 96       	adiw	r28, 0x08	; 8
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	08 95       	ret

00001602 <handle_game_over>:


void handle_game_over() {
	game_over = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <game_over>
	count_clear();
    1608:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <count_clear>
	ledmatrix_clear();
    160c:	0e 94 4a 07 	call	0xe94	; 0xe94 <ledmatrix_clear>
	
	move_cursor(10,14);
    1610:	6e e0       	ldi	r22, 0x0E	; 14
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	8a e0       	ldi	r24, 0x0A	; 10
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    161c:	85 ec       	ldi	r24, 0xC5	; 197
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9f 93       	push	r25
    1622:	8f 93       	push	r24
    1624:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
	move_cursor(10,15);
    1628:	6f e0       	ldi	r22, 0x0F	; 15
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	8a e0       	ldi	r24, 0x0A	; 10
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    1634:	87 ea       	ldi	r24, 0xA7	; 167
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	9f 93       	push	r25
    163a:	8f 93       	push	r24
    163c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0

	while(1) {
		set_scrolling_display_text("GAME OVER", COLOUR_GREEN);
    1648:	60 ef       	ldi	r22, 0xF0	; 240
    164a:	8e e4       	ldi	r24, 0x4E	; 78
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <set_scrolling_display_text>
		while(scroll_display()) {
    1652:	0d c0       	rjmp	.+26     	; 0x166e <handle_game_over+0x6c>
    1654:	2f e7       	ldi	r18, 0x7F	; 127
    1656:	86 e2       	ldi	r24, 0x26	; 38
    1658:	94 e0       	ldi	r25, 0x04	; 4
    165a:	21 50       	subi	r18, 0x01	; 1
    165c:	80 40       	sbci	r24, 0x00	; 0
    165e:	90 40       	sbci	r25, 0x00	; 0
    1660:	e1 f7       	brne	.-8      	; 0x165a <handle_game_over+0x58>
    1662:	00 c0       	rjmp	.+0      	; 0x1664 <handle_game_over+0x62>
    1664:	00 00       	nop
			_delay_ms(170);
			if(button_pushed() != NO_BUTTON_PUSHED) {
    1666:	0e 94 62 01 	call	0x2c4	; 0x2c4 <button_pushed>
    166a:	8f 3f       	cpi	r24, 0xFF	; 255
    166c:	29 f4       	brne	.+10     	; 0x1678 <handle_game_over+0x76>
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));

	while(1) {
		set_scrolling_display_text("GAME OVER", COLOUR_GREEN);
		while(scroll_display()) {
    166e:	0e 94 8a 0b 	call	0x1714	; 0x1714 <scroll_display>
    1672:	81 11       	cpse	r24, r1
    1674:	ef cf       	rjmp	.-34     	; 0x1654 <handle_game_over+0x52>
    1676:	e8 cf       	rjmp	.-48     	; 0x1648 <handle_game_over+0x46>
    1678:	08 95       	ret

0000167a <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    167a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    167e:	0e 94 c8 07 	call	0xf90	; 0xf90 <splash_screen>
	
	while(1) {
		new_game();
    1682:	0e 94 01 08 	call	0x1002	; 0x1002 <new_game>
		while(!game_over) {
    1686:	0b c0       	rjmp	.+22     	; 0x169e <main+0x24>
			if(no_more_live()) {
    1688:	0e 94 61 07 	call	0xec2	; 0xec2 <no_more_live>
    168c:	88 23       	and	r24, r24
    168e:	19 f0       	breq	.+6      	; 0x1696 <main+0x1c>
				handle_game_over();
    1690:	0e 94 01 0b 	call	0x1602	; 0x1602 <handle_game_over>
    1694:	04 c0       	rjmp	.+8      	; 0x169e <main+0x24>
			} else {
				next_level();
    1696:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <next_level>
				play_game();
    169a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <play_game>
	// is complete
	splash_screen();
	
	while(1) {
		new_game();
		while(!game_over) {
    169e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <game_over>
    16a2:	88 23       	and	r24, r24
    16a4:	89 f3       	breq	.-30     	; 0x1688 <main+0xe>
    16a6:	ed cf       	rjmp	.-38     	; 0x1682 <main+0x8>

000016a8 <init_score>:
#include "terminalio.h"

uint8_t score;

void init_score(void) {
	score = 0;
    16a8:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <score>
    16ac:	08 95       	ret

000016ae <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    16ae:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <score>
    16b2:	89 0f       	add	r24, r25
    16b4:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <score>
	
	move_cursor(55,14);
    16b8:	6e e0       	ldi	r22, 0x0E	; 14
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	87 e3       	ldi	r24, 0x37	; 55
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <move_cursor>
	printf_P(PSTR("Score:%10d"), get_score());
    16c4:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <score>
    16c8:	1f 92       	push	r1
    16ca:	1f 92       	push	r1
    16cc:	1f 92       	push	r1
    16ce:	8f 93       	push	r24
    16d0:	83 e7       	ldi	r24, 0x73	; 115
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	9f 93       	push	r25
    16d6:	8f 93       	push	r24
    16d8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
}
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	08 95       	ret

000016ea <get_score>:

uint32_t get_score(void) {
	return score;
    16ea:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <score>
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
}
    16f4:	08 95       	ret

000016f6 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    16f6:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <colour>
	display_string = string_to_display;
    16fa:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <display_string+0x1>
    16fe:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <display_string>
	next_col_ptr = 0;
    1702:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <next_col_ptr+0x1>
    1706:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <next_col_ptr>
	next_char_to_display = 0;
    170a:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <next_char_to_display+0x1>
    170e:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <next_char_to_display>
    1712:	08 95       	ret

00001714 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	28 97       	sbiw	r28, 0x08	; 8
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	de bf       	out	0x3e, r29	; 62
    1728:	0f be       	out	0x3f, r0	; 63
    172a:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    172c:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <next_col_ptr>
    1730:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <next_col_ptr+0x1>
    1734:	30 97       	sbiw	r30, 0x00	; 0
    1736:	81 f0       	breq	.+32     	; 0x1758 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1738:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    173a:	10 ff       	sbrs	r17, 0
    173c:	06 c0       	rjmp	.+12     	; 0x174a <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    173e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <next_col_ptr+0x1>
    1742:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1746:	00 e0       	ldi	r16, 0x00	; 0
    1748:	6b c0       	rjmp	.+214    	; 0x1820 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    174a:	31 96       	adiw	r30, 0x01	; 1
    174c:	f0 93 89 01 	sts	0x0189, r31	; 0x800189 <next_col_ptr+0x1>
    1750:	e0 93 88 01 	sts	0x0188, r30	; 0x800188 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1754:	00 e0       	ldi	r16, 0x00	; 0
    1756:	64 c0       	rjmp	.+200    	; 0x1820 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1758:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <next_char_to_display>
    175c:	f0 91 85 01 	lds	r31, 0x0185	; 0x800185 <next_char_to_display+0x1>
    1760:	30 97       	sbiw	r30, 0x00	; 0
    1762:	09 f4       	brne	.+2      	; 0x1766 <scroll_display+0x52>
    1764:	49 c0       	rjmp	.+146    	; 0x17f8 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1766:	cf 01       	movw	r24, r30
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <next_char_to_display+0x1>
    176e:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <next_char_to_display>
    1772:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1774:	e1 11       	cpse	r30, r1
    1776:	0a c0       	rjmp	.+20     	; 0x178c <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1778:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <next_char_to_display+0x1>
    177c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <next_char_to_display>
			shift_countdown = 16;
    1780:	80 e1       	ldi	r24, 0x10	; 16
    1782:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1786:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1788:	10 e0       	ldi	r17, 0x00	; 0
    178a:	4a c0       	rjmp	.+148    	; 0x1820 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    178c:	8f e9       	ldi	r24, 0x9F	; 159
    178e:	8e 0f       	add	r24, r30
    1790:	8a 31       	cpi	r24, 0x1A	; 26
    1792:	70 f4       	brcc	.+28     	; 0x17b0 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	ee 0f       	add	r30, r30
    1798:	ff 1f       	adc	r31, r31
    179a:	e0 53       	subi	r30, 0x30	; 48
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	85 91       	lpm	r24, Z+
    17a0:	94 91       	lpm	r25, Z
    17a2:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <next_col_ptr+0x1>
    17a6:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17aa:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17ac:	10 e0       	ldi	r17, 0x00	; 0
    17ae:	38 c0       	rjmp	.+112    	; 0x1820 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    17b0:	8f eb       	ldi	r24, 0xBF	; 191
    17b2:	8e 0f       	add	r24, r30
    17b4:	8a 31       	cpi	r24, 0x1A	; 26
    17b6:	70 f4       	brcc	.+28     	; 0x17d4 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	ee 0f       	add	r30, r30
    17bc:	ff 1f       	adc	r31, r31
    17be:	e0 5f       	subi	r30, 0xF0	; 240
    17c0:	fe 4f       	sbci	r31, 0xFE	; 254
    17c2:	85 91       	lpm	r24, Z+
    17c4:	94 91       	lpm	r25, Z
    17c6:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <next_col_ptr+0x1>
    17ca:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17ce:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17d0:	10 e0       	ldi	r17, 0x00	; 0
    17d2:	26 c0       	rjmp	.+76     	; 0x1820 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    17d4:	80 ed       	ldi	r24, 0xD0	; 208
    17d6:	8e 0f       	add	r24, r30
    17d8:	8a 30       	cpi	r24, 0x0A	; 10
    17da:	00 f5       	brcc	.+64     	; 0x181c <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	ee 0f       	add	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	e2 5e       	subi	r30, 0xE2	; 226
    17e4:	fe 4f       	sbci	r31, 0xFE	; 254
    17e6:	85 91       	lpm	r24, Z+
    17e8:	94 91       	lpm	r25, Z
    17ea:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <next_col_ptr+0x1>
    17ee:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17f2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17f4:	10 e0       	ldi	r17, 0x00	; 0
    17f6:	14 c0       	rjmp	.+40     	; 0x1820 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    17f8:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <display_string>
    17fc:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1800:	01 e0       	ldi	r16, 0x01	; 1
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	09 f0       	breq	.+2      	; 0x1808 <scroll_display+0xf4>
    1806:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1808:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <next_char_to_display+0x1>
    180c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <next_char_to_display>
		display_string = 0;
    1810:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <display_string+0x1>
    1814:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1818:	10 e0       	ldi	r17, 0x00	; 0
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    181c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    181e:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1820:	0e 94 43 07 	call	0xe86	; 0xe86 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1824:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <colour>
    1828:	fe 01       	movw	r30, r28
    182a:	38 96       	adiw	r30, 0x08	; 8
    182c:	ce 01       	movw	r24, r28
    182e:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1830:	11 23       	and	r17, r17
    1832:	14 f4       	brge	.+4      	; 0x1838 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1834:	20 83       	st	Z, r18
    1836:	01 c0       	rjmp	.+2      	; 0x183a <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1838:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    183a:	11 0f       	add	r17, r17
    183c:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    183e:	e8 17       	cp	r30, r24
    1840:	f9 07       	cpc	r31, r25
    1842:	b1 f7       	brne	.-20     	; 0x1830 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1844:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1846:	be 01       	movw	r22, r28
    1848:	6f 5f       	subi	r22, 0xFF	; 255
    184a:	7f 4f       	sbci	r23, 0xFF	; 255
    184c:	8f e0       	ldi	r24, 0x0F	; 15
    184e:	0e 94 26 07 	call	0xe4c	; 0xe4c <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1852:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <shift_countdown.1854>
    1856:	88 23       	and	r24, r24
    1858:	89 f0       	breq	.+34     	; 0x187c <scroll_display+0x168>
		shift_countdown--;
    185a:	81 50       	subi	r24, 0x01	; 1
    185c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1860:	00 23       	and	r16, r16
    1862:	11 f0       	breq	.+4      	; 0x1868 <scroll_display+0x154>
    1864:	88 23       	and	r24, r24
    1866:	11 f0       	breq	.+4      	; 0x186c <scroll_display+0x158>
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <scroll_display+0x15e>
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	01 c0       	rjmp	.+2      	; 0x1872 <scroll_display+0x15e>
    1870:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	99 23       	and	r25, r25
    1876:	29 f0       	breq	.+10     	; 0x1882 <scroll_display+0x16e>
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    187c:	00 23       	and	r16, r16
    187e:	a1 f3       	breq	.-24     	; 0x1868 <scroll_display+0x154>
    1880:	f7 cf       	rjmp	.-18     	; 0x1870 <scroll_display+0x15c>
	return !finished;
}
    1882:	28 96       	adiw	r28, 0x08	; 8
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	1f 91       	pop	r17
    1894:	0f 91       	pop	r16
    1896:	08 95       	ret

00001898 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1898:	cf 93       	push	r28
    189a:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    189c:	8a 30       	cpi	r24, 0x0A	; 10
    189e:	19 f4       	brne	.+6      	; 0x18a6 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    18a0:	8d e0       	ldi	r24, 0x0D	; 13
    18a2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    18a6:	9f b7       	in	r25, 0x3f	; 63
    18a8:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    18ac:	99 23       	and	r25, r25
    18ae:	29 f1       	breq	.+74     	; 0x18fa <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    18b0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    18b4:	8f 3f       	cpi	r24, 0xFF	; 255
    18b6:	d1 f3       	breq	.-12     	; 0x18ac <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    18b8:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    18ba:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <out_insert_pos>
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	8e 0f       	add	r24, r30
    18c2:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <out_insert_pos>
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	e4 56       	subi	r30, 0x64	; 100
    18ca:	fe 4f       	sbci	r31, 0xFE	; 254
    18cc:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    18ce:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    18d8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <out_insert_pos>
    18dc:	8f 3f       	cpi	r24, 0xFF	; 255
    18de:	11 f4       	brne	.+4      	; 0x18e4 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    18e0:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    18e4:	e1 ec       	ldi	r30, 0xC1	; 193
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 62       	ori	r24, 0x20	; 32
    18ec:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    18ee:	99 23       	and	r25, r25
    18f0:	39 f0       	breq	.+14     	; 0x1900 <uart_put_char+0x68>
		sei();
    18f2:	78 94       	sei
	}
	return 0;
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
}
    1904:	cf 91       	pop	r28
    1906:	08 95       	ret

00001908 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1908:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    190c:	88 23       	and	r24, r24
    190e:	e1 f3       	breq	.-8      	; 0x1908 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1910:	2f b7       	in	r18, 0x3f	; 63
    1912:	20 78       	andi	r18, 0x80	; 128
	cli();
    1914:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1916:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <input_insert_pos>
    191a:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	83 1b       	sub	r24, r19
    1922:	91 09       	sbc	r25, r1
    1924:	5a f4       	brpl	.+22     	; 0x193c <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1926:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <input_insert_pos>
    192a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	e8 1b       	sub	r30, r24
    1932:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1934:	e4 55       	subi	r30, 0x54	; 84
    1936:	fd 4f       	sbci	r31, 0xFD	; 253
    1938:	80 81       	ld	r24, Z
    193a:	0a c0       	rjmp	.+20     	; 0x1950 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    193c:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <input_insert_pos>
    1940:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	e8 1b       	sub	r30, r24
    1948:	f1 09       	sbc	r31, r1
    194a:	e4 56       	subi	r30, 0x64	; 100
    194c:	fd 4f       	sbci	r31, 0xFD	; 253
    194e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1950:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    1954:	91 50       	subi	r25, 0x01	; 1
    1956:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <bytes_in_input_buffer>
	if(interrupts_enabled) {
    195a:	22 23       	and	r18, r18
    195c:	09 f0       	breq	.+2      	; 0x1960 <uart_get_char+0x58>
		sei();
    195e:	78 94       	sei
	}	
	return c;
}
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	08 95       	ret

00001964 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1964:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <out_insert_pos>
	bytes_in_out_buffer = 0;
    1968:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <bytes_in_out_buffer>
	input_insert_pos = 0;
    196c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <input_insert_pos>
	bytes_in_input_buffer = 0;
    1970:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <bytes_in_input_buffer>
	input_overrun = 0;
    1974:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1978:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	aa 1f       	adc	r26, r26
    1986:	bb 1f       	adc	r27, r27
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	aa 1f       	adc	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	9c 01       	movw	r18, r24
    1992:	ad 01       	movw	r20, r26
    1994:	22 0f       	add	r18, r18
    1996:	33 1f       	adc	r19, r19
    1998:	44 1f       	adc	r20, r20
    199a:	55 1f       	adc	r21, r21
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	72 e1       	ldi	r23, 0x12	; 18
    19a0:	8a e7       	ldi	r24, 0x7A	; 122
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <__divmodsi4>
    19a8:	ba 01       	movw	r22, r20
    19aa:	a9 01       	movw	r20, r18
    19ac:	4f 5f       	subi	r20, 0xFF	; 255
    19ae:	5f 4f       	sbci	r21, 0xFF	; 255
    19b0:	6f 4f       	sbci	r22, 0xFF	; 255
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	db 01       	movw	r26, r22
    19b6:	ca 01       	movw	r24, r20
    19b8:	1a f4       	brpl	.+6      	; 0x19c0 <init_serial_stdio+0x5c>
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	a1 1d       	adc	r26, r1
    19be:	b1 1d       	adc	r27, r1
    19c0:	b5 95       	asr	r27
    19c2:	a7 95       	ror	r26
    19c4:	97 95       	ror	r25
    19c6:	87 95       	ror	r24
    19c8:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    19ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    19d2:	e1 ec       	ldi	r30, 0xC1	; 193
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	88 e1       	ldi	r24, 0x18	; 24
    19d8:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    19da:	80 81       	ld	r24, Z
    19dc:	80 68       	ori	r24, 0x80	; 128
    19de:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    19e0:	ee ea       	ldi	r30, 0xAE	; 174
    19e2:	f2 e0       	ldi	r31, 0x02	; 2
    19e4:	86 e0       	ldi	r24, 0x06	; 6
    19e6:	91 e0       	ldi	r25, 0x01	; 1
    19e8:	93 83       	std	Z+3, r25	; 0x03
    19ea:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	08 95       	ret

000019f2 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    19f2:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	91 11       	cpse	r25, r1
    19fa:	01 c0       	rjmp	.+2      	; 0x19fe <serial_input_available+0xc>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
}
    19fe:	08 95       	ret

00001a00 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1a00:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <input_insert_pos>
	bytes_in_input_buffer = 0;
    1a04:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <bytes_in_input_buffer>
    1a08:	08 95       	ret

00001a0a <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	2f 93       	push	r18
    1a16:	8f 93       	push	r24
    1a18:	9f 93       	push	r25
    1a1a:	ef 93       	push	r30
    1a1c:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1a1e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    1a22:	88 23       	and	r24, r24
    1a24:	29 f1       	breq	.+74     	; 0x1a70 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1a26:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <out_insert_pos>
    1a2a:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <bytes_in_out_buffer>
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	82 1b       	sub	r24, r18
    1a32:	91 09       	sbc	r25, r1
    1a34:	5a f4       	brpl	.+22     	; 0x1a4c <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1a36:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <out_insert_pos>
    1a3a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	e8 1b       	sub	r30, r24
    1a42:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1a44:	e5 56       	subi	r30, 0x65	; 101
    1a46:	fd 4f       	sbci	r31, 0xFD	; 253
    1a48:	90 81       	ld	r25, Z
    1a4a:	0a c0       	rjmp	.+20     	; 0x1a60 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1a4c:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <out_insert_pos>
    1a50:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	e8 1b       	sub	r30, r24
    1a58:	f1 09       	sbc	r31, r1
    1a5a:	e4 56       	subi	r30, 0x64	; 100
    1a5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1a60:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    1a64:	81 50       	subi	r24, 0x01	; 1
    1a66:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1a6a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1a6e:	05 c0       	rjmp	.+10     	; 0x1a7a <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1a70:	e1 ec       	ldi	r30, 0xC1	; 193
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8f 7d       	andi	r24, 0xDF	; 223
    1a78:	80 83       	st	Z, r24
	}
}
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	2f 91       	pop	r18
    1a84:	0f 90       	pop	r0
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	0f 90       	pop	r0
    1a8a:	1f 90       	pop	r1
    1a8c:	18 95       	reti

00001a8e <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1a8e:	1f 92       	push	r1
    1a90:	0f 92       	push	r0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	0f 92       	push	r0
    1a96:	11 24       	eor	r1, r1
    1a98:	2f 93       	push	r18
    1a9a:	3f 93       	push	r19
    1a9c:	4f 93       	push	r20
    1a9e:	5f 93       	push	r21
    1aa0:	6f 93       	push	r22
    1aa2:	7f 93       	push	r23
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	af 93       	push	r26
    1aaa:	bf 93       	push	r27
    1aac:	cf 93       	push	r28
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1ab2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1ab6:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <do_echo>
    1aba:	88 23       	and	r24, r24
    1abc:	49 f0       	breq	.+18     	; 0x1ad0 <__vector_20+0x42>
    1abe:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <bytes_in_out_buffer>
    1ac2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac4:	29 f0       	breq	.+10     	; 0x1ad0 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	8c 2f       	mov	r24, r28
    1acc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1ad0:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    1ad4:	80 31       	cpi	r24, 0x10	; 16
    1ad6:	20 f0       	brcs	.+8      	; 0x1ae0 <__vector_20+0x52>
		input_overrun = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <input_overrun>
    1ade:	18 c0       	rjmp	.+48     	; 0x1b10 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1ae0:	cd 30       	cpi	r28, 0x0D	; 13
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <__vector_20+0x58>
			c = '\n';
    1ae4:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1ae6:	e0 91 9b 02 	lds	r30, 0x029B	; 0x80029b <input_insert_pos>
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	8e 0f       	add	r24, r30
    1aee:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <input_insert_pos>
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	e4 56       	subi	r30, 0x64	; 100
    1af6:	fd 4f       	sbci	r31, 0xFD	; 253
    1af8:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1afa:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_input_buffer>
    1afe:	8f 5f       	subi	r24, 0xFF	; 255
    1b00:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1b04:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <input_insert_pos>
    1b08:	80 31       	cpi	r24, 0x10	; 16
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1b0c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <input_insert_pos>
		}
	}
}
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	cf 91       	pop	r28
    1b16:	bf 91       	pop	r27
    1b18:	af 91       	pop	r26
    1b1a:	9f 91       	pop	r25
    1b1c:	8f 91       	pop	r24
    1b1e:	7f 91       	pop	r23
    1b20:	6f 91       	pop	r22
    1b22:	5f 91       	pop	r21
    1b24:	4f 91       	pop	r20
    1b26:	3f 91       	pop	r19
    1b28:	2f 91       	pop	r18
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	0f 90       	pop	r0
    1b30:	1f 90       	pop	r1
    1b32:	18 95       	reti

00001b34 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1b34:	94 b1       	in	r25, 0x04	; 4
    1b36:	90 6b       	ori	r25, 0xB0	; 176
    1b38:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1b3a:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1b3c:	90 e5       	ldi	r25, 0x50	; 80
    1b3e:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1b40:	88 30       	cpi	r24, 0x08	; 8
    1b42:	21 f0       	breq	.+8      	; 0x1b4c <spi_setup_master+0x18>
    1b44:	80 32       	cpi	r24, 0x20	; 32
    1b46:	11 f0       	breq	.+4      	; 0x1b4c <spi_setup_master+0x18>
    1b48:	82 30       	cpi	r24, 0x02	; 2
    1b4a:	19 f4       	brne	.+6      	; 0x1b52 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	9d bd       	out	0x2d, r25	; 45
			break;
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1b52:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1b54:	80 32       	cpi	r24, 0x20	; 32
    1b56:	69 f0       	breq	.+26     	; 0x1b72 <spi_setup_master+0x3e>
    1b58:	28 f4       	brcc	.+10     	; 0x1b64 <spi_setup_master+0x30>
    1b5a:	88 30       	cpi	r24, 0x08	; 8
    1b5c:	71 f0       	breq	.+28     	; 0x1b7a <spi_setup_master+0x46>
    1b5e:	80 31       	cpi	r24, 0x10	; 16
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <spi_setup_master+0x46>
    1b62:	0e c0       	rjmp	.+28     	; 0x1b80 <spi_setup_master+0x4c>
    1b64:	80 34       	cpi	r24, 0x40	; 64
    1b66:	29 f0       	breq	.+10     	; 0x1b72 <spi_setup_master+0x3e>
    1b68:	80 38       	cpi	r24, 0x80	; 128
    1b6a:	51 f4       	brne	.+20     	; 0x1b80 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1b6c:	8c b5       	in	r24, 0x2c	; 44
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1b72:	8c b5       	in	r24, 0x2c	; 44
    1b74:	82 60       	ori	r24, 0x02	; 2
    1b76:	8c bd       	out	0x2c, r24	; 44
			break;
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1b7a:	8c b5       	in	r24, 0x2c	; 44
    1b7c:	81 60       	ori	r24, 0x01	; 1
    1b7e:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1b80:	2c 98       	cbi	0x05, 4	; 5
    1b82:	08 95       	ret

00001b84 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1b84:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1b86:	0d b4       	in	r0, 0x2d	; 45
    1b88:	07 fe       	sbrs	r0, 7
    1b8a:	fd cf       	rjmp	.-6      	; 0x1b86 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1b8c:	8e b5       	in	r24, 0x2e	; 46
    1b8e:	08 95       	ret

00001b90 <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1b90:	9f 93       	push	r25
    1b92:	8f 93       	push	r24
    1b94:	7f 93       	push	r23
    1b96:	6f 93       	push	r22
    1b98:	81 e6       	ldi	r24, 0x61	; 97
    1b9a:	92 e0       	ldi	r25, 0x02	; 2
    1b9c:	9f 93       	push	r25
    1b9e:	8f 93       	push	r24
    1ba0:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	08 95       	ret

00001bb2 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    1bb2:	8c e5       	ldi	r24, 0x5C	; 92
    1bb4:	92 e0       	ldi	r25, 0x02	; 2
    1bb6:	9f 93       	push	r25
    1bb8:	8f 93       	push	r24
    1bba:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printf_P>
}
    1bbe:	0f 90       	pop	r0
    1bc0:	0f 90       	pop	r0
    1bc2:	08 95       	ret

00001bc4 <init_timer0>:
	returnValue = clockTicks;
	if(interruptsOn) {
		sei();
	}
	return returnValue;
}
    1bc4:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <clockTicks>
    1bc8:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <clockTicks+0x1>
    1bcc:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <clockTicks+0x2>
    1bd0:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <clockTicks+0x3>
    1bd4:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <timeClockTicks>
    1bd8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <timeClockTicks+0x1>
    1bdc:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <timeClockTicks+0x2>
    1be0:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <timeClockTicks+0x3>
    1be4:	16 bc       	out	0x26, r1	; 38
    1be6:	8c e7       	ldi	r24, 0x7C	; 124
    1be8:	87 bd       	out	0x27, r24	; 39
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	84 bd       	out	0x24, r24	; 36
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	85 bd       	out	0x25, r24	; 37
    1bf2:	ee e6       	ldi	r30, 0x6E	; 110
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	82 60       	ori	r24, 0x02	; 2
    1bfa:	80 83       	st	Z, r24
    1bfc:	85 b3       	in	r24, 0x15	; 21
    1bfe:	82 70       	andi	r24, 0x02	; 2
    1c00:	85 bb       	out	0x15, r24	; 21
    1c02:	08 95       	ret

00001c04 <get_current_time>:
    1c04:	2f b7       	in	r18, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <clockTicks>
    1c0c:	70 91 95 01 	lds	r23, 0x0195	; 0x800195 <clockTicks+0x1>
    1c10:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <clockTicks+0x2>
    1c14:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <clockTicks+0x3>
    1c18:	22 23       	and	r18, r18
    1c1a:	0c f4       	brge	.+2      	; 0x1c1e <get_current_time+0x1a>
    1c1c:	78 94       	sei
    1c1e:	08 95       	ret

00001c20 <start_counting>:

void start_counting(void) {
	timer_count = 1;
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <timer_count+0x1>
    1c28:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <timer_count>
    1c2c:	08 95       	ret

00001c2e <stop_counting>:
}

void stop_counting(void) {
	timer_count = 0;
    1c2e:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <timer_count+0x1>
    1c32:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <timer_count>
    1c36:	08 95       	ret

00001c38 <init_count>:
}

void init_count(void) {
	DDRC = 0xFF;
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
    1c3a:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << DDRD2);
    1c3c:	52 9a       	sbi	0x0a, 2	; 10
	
	count = 0;
    1c3e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <count+0x1>
    1c42:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <count>
    1c46:	08 95       	ret

00001c48 <count_set>:
}

void count_set(uint8_t start) {
	count = start * 1000;
    1c48:	28 ee       	ldi	r18, 0xE8	; 232
    1c4a:	33 e0       	ldi	r19, 0x03	; 3
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	42 9f       	mul	r20, r18
    1c50:	c0 01       	movw	r24, r0
    1c52:	43 9f       	mul	r20, r19
    1c54:	90 0d       	add	r25, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <count+0x1>
    1c5c:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <count>
    1c60:	08 95       	ret

00001c62 <count_clear>:
}

void count_clear(void) {
	count = 0;
    1c62:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <count+0x1>
    1c66:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <count>
    1c6a:	08 95       	ret

00001c6c <count_end>:
}

uint8_t count_end(void) {
	return (count == 0);
    1c6c:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <count>
    1c70:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <count+0x1>
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	23 2b       	or	r18, r19
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <count_end+0x10>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
}
    1c7c:	08 95       	ret

00001c7e <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    1c7e:	1f 92       	push	r1
    1c80:	0f 92       	push	r0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	0f 92       	push	r0
    1c86:	11 24       	eor	r1, r1
    1c88:	2f 93       	push	r18
    1c8a:	3f 93       	push	r19
    1c8c:	4f 93       	push	r20
    1c8e:	5f 93       	push	r21
    1c90:	6f 93       	push	r22
    1c92:	7f 93       	push	r23
    1c94:	8f 93       	push	r24
    1c96:	9f 93       	push	r25
    1c98:	af 93       	push	r26
    1c9a:	bf 93       	push	r27
    1c9c:	ef 93       	push	r30
    1c9e:	ff 93       	push	r31
	clockTicks++;
    1ca0:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <clockTicks>
    1ca4:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <clockTicks+0x1>
    1ca8:	a0 91 96 01 	lds	r26, 0x0196	; 0x800196 <clockTicks+0x2>
    1cac:	b0 91 97 01 	lds	r27, 0x0197	; 0x800197 <clockTicks+0x3>
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	a1 1d       	adc	r26, r1
    1cb4:	b1 1d       	adc	r27, r1
    1cb6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <clockTicks>
    1cba:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <clockTicks+0x1>
    1cbe:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <clockTicks+0x2>
    1cc2:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <clockTicks+0x3>
	
	if(timer_count) {
    1cc6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <timer_count>
    1cca:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <timer_count+0x1>
    1cce:	89 2b       	or	r24, r25
    1cd0:	11 f1       	breq	.+68     	; 0x1d16 <__vector_16+0x98>
		timeClockTicks++;
    1cd2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <timeClockTicks>
    1cd6:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <timeClockTicks+0x1>
    1cda:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <timeClockTicks+0x2>
    1cde:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <timeClockTicks+0x3>
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	a1 1d       	adc	r26, r1
    1ce6:	b1 1d       	adc	r27, r1
    1ce8:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <timeClockTicks>
    1cec:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <timeClockTicks+0x1>
    1cf0:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <timeClockTicks+0x2>
    1cf4:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <timeClockTicks+0x3>
		if(count > 0) {
    1cf8:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <count>
    1cfc:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <count+0x1>
    1d00:	89 2b       	or	r24, r25
    1d02:	49 f0       	breq	.+18     	; 0x1d16 <__vector_16+0x98>
			count--;
    1d04:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <count>
    1d08:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <count+0x1>
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <count+0x1>
    1d12:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <count>
		}
	}
	
	digit_counter++;
    1d16:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <digit_counter>
    1d1a:	8f 5f       	subi	r24, 0xFF	; 255
    1d1c:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <digit_counter>
	if(digit_counter > 3) {
    1d20:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <digit_counter>
    1d24:	84 30       	cpi	r24, 0x04	; 4
    1d26:	10 f0       	brcs	.+4      	; 0x1d2c <__vector_16+0xae>
		digit_counter = 0;
    1d28:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <digit_counter>
	}
	
	uint8_t seven_seg_cc = digit_counter >> 1;
    1d2c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <digit_counter>
    1d30:	86 95       	lsr	r24
	
	//  Start countdown when game started
	if(count > 0) { 
    1d32:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <count>
    1d36:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <count+0x1>
    1d3a:	23 2b       	or	r18, r19
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <__vector_16+0xc2>
    1d3e:	53 c0       	rjmp	.+166    	; 0x1de6 <__vector_16+0x168>
		uint16_t to_display = count + 1000;
    1d40:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <count>
    1d44:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <count+0x1>
    1d48:	28 51       	subi	r18, 0x18	; 24
    1d4a:	3c 4f       	sbci	r19, 0xFC	; 252
		//led display
		if(seven_seg_cc == 0) {
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	2f c0       	rjmp	.+94     	; 0x1dae <__vector_16+0x130>
			/* Display rightmost digit - tens of second */
			PORTC = seven_seg_data[(to_display / 1000) % 10];
    1d50:	36 95       	lsr	r19
    1d52:	27 95       	ror	r18
    1d54:	36 95       	lsr	r19
    1d56:	27 95       	ror	r18
    1d58:	36 95       	lsr	r19
    1d5a:	27 95       	ror	r18
    1d5c:	a5 ec       	ldi	r26, 0xC5	; 197
    1d5e:	b0 e2       	ldi	r27, 0x20	; 32
    1d60:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__umulhisi3>
    1d64:	ac 01       	movw	r20, r24
    1d66:	52 95       	swap	r21
    1d68:	42 95       	swap	r20
    1d6a:	4f 70       	andi	r20, 0x0F	; 15
    1d6c:	45 27       	eor	r20, r21
    1d6e:	5f 70       	andi	r21, 0x0F	; 15
    1d70:	45 27       	eor	r20, r21
    1d72:	9a 01       	movw	r18, r20
    1d74:	ad ec       	ldi	r26, 0xCD	; 205
    1d76:	bc ec       	ldi	r27, 0xCC	; 204
    1d78:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__umulhisi3>
    1d7c:	96 95       	lsr	r25
    1d7e:	87 95       	ror	r24
    1d80:	96 95       	lsr	r25
    1d82:	87 95       	ror	r24
    1d84:	96 95       	lsr	r25
    1d86:	87 95       	ror	r24
    1d88:	9c 01       	movw	r18, r24
    1d8a:	22 0f       	add	r18, r18
    1d8c:	33 1f       	adc	r19, r19
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	82 0f       	add	r24, r18
    1d9c:	93 1f       	adc	r25, r19
    1d9e:	48 1b       	sub	r20, r24
    1da0:	59 0b       	sbc	r21, r25
    1da2:	fa 01       	movw	r30, r20
    1da4:	e8 5a       	subi	r30, 0xA8	; 168
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
    1da8:	80 81       	ld	r24, Z
    1daa:	88 b9       	out	0x08, r24	; 8
    1dac:	21 c0       	rjmp	.+66     	; 0x1df0 <__vector_16+0x172>
			
		} else {
			/* Display leftmost digit - tens of seconds */
			if (to_display > 10000) { 
    1dae:	21 31       	cpi	r18, 0x11	; 17
    1db0:	87 e2       	ldi	r24, 0x27	; 39
    1db2:	38 07       	cpc	r19, r24
    1db4:	b0 f0       	brcs	.+44     	; 0x1de2 <__vector_16+0x164>
				PORTC = seven_seg_data[(to_display / 10000) % 10];
    1db6:	32 95       	swap	r19
    1db8:	22 95       	swap	r18
    1dba:	2f 70       	andi	r18, 0x0F	; 15
    1dbc:	23 27       	eor	r18, r19
    1dbe:	3f 70       	andi	r19, 0x0F	; 15
    1dc0:	23 27       	eor	r18, r19
    1dc2:	a7 e4       	ldi	r26, 0x47	; 71
    1dc4:	b3 e0       	ldi	r27, 0x03	; 3
    1dc6:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__umulhisi3>
    1dca:	96 95       	lsr	r25
    1dcc:	87 95       	ror	r24
    1dce:	96 95       	lsr	r25
    1dd0:	87 95       	ror	r24
    1dd2:	96 95       	lsr	r25
    1dd4:	87 95       	ror	r24
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	e8 5a       	subi	r30, 0xA8	; 168
    1dda:	fe 4f       	sbci	r31, 0xFE	; 254
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 b9       	out	0x08, r24	; 8
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <__vector_16+0x16e>
			} else {
				PORTC = 0;
    1de2:	18 b8       	out	0x08, r1	; 8
    1de4:	03 c0       	rjmp	.+6      	; 0x1dec <__vector_16+0x16e>
			}
			
		}
	} else {
		PORTC = 0;
    1de6:	18 b8       	out	0x08, r1	; 8
	}
	
	/* Output the digit selection (CC) bit */
	if (seven_seg_cc) {
    1de8:	88 23       	and	r24, r24
    1dea:	11 f0       	breq	.+4      	; 0x1df0 <__vector_16+0x172>
		PORTD |= (1 << PORTD2);
    1dec:	5a 9a       	sbi	0x0b, 2	; 11
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <__vector_16+0x174>
	} else {
		PORTD &= ~(1 << PORTD2);
    1df0:	5a 98       	cbi	0x0b, 2	; 11
	}
}
    1df2:	ff 91       	pop	r31
    1df4:	ef 91       	pop	r30
    1df6:	bf 91       	pop	r27
    1df8:	af 91       	pop	r26
    1dfa:	9f 91       	pop	r25
    1dfc:	8f 91       	pop	r24
    1dfe:	7f 91       	pop	r23
    1e00:	6f 91       	pop	r22
    1e02:	5f 91       	pop	r21
    1e04:	4f 91       	pop	r20
    1e06:	3f 91       	pop	r19
    1e08:	2f 91       	pop	r18
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <__udivmodsi4>:
    1e14:	a1 e2       	ldi	r26, 0x21	; 33
    1e16:	1a 2e       	mov	r1, r26
    1e18:	aa 1b       	sub	r26, r26
    1e1a:	bb 1b       	sub	r27, r27
    1e1c:	fd 01       	movw	r30, r26
    1e1e:	0d c0       	rjmp	.+26     	; 0x1e3a <__udivmodsi4_ep>

00001e20 <__udivmodsi4_loop>:
    1e20:	aa 1f       	adc	r26, r26
    1e22:	bb 1f       	adc	r27, r27
    1e24:	ee 1f       	adc	r30, r30
    1e26:	ff 1f       	adc	r31, r31
    1e28:	a2 17       	cp	r26, r18
    1e2a:	b3 07       	cpc	r27, r19
    1e2c:	e4 07       	cpc	r30, r20
    1e2e:	f5 07       	cpc	r31, r21
    1e30:	20 f0       	brcs	.+8      	; 0x1e3a <__udivmodsi4_ep>
    1e32:	a2 1b       	sub	r26, r18
    1e34:	b3 0b       	sbc	r27, r19
    1e36:	e4 0b       	sbc	r30, r20
    1e38:	f5 0b       	sbc	r31, r21

00001e3a <__udivmodsi4_ep>:
    1e3a:	66 1f       	adc	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	88 1f       	adc	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	1a 94       	dec	r1
    1e44:	69 f7       	brne	.-38     	; 0x1e20 <__udivmodsi4_loop>
    1e46:	60 95       	com	r22
    1e48:	70 95       	com	r23
    1e4a:	80 95       	com	r24
    1e4c:	90 95       	com	r25
    1e4e:	9b 01       	movw	r18, r22
    1e50:	ac 01       	movw	r20, r24
    1e52:	bd 01       	movw	r22, r26
    1e54:	cf 01       	movw	r24, r30
    1e56:	08 95       	ret

00001e58 <__divmodsi4>:
    1e58:	05 2e       	mov	r0, r21
    1e5a:	97 fb       	bst	r25, 7
    1e5c:	1e f4       	brtc	.+6      	; 0x1e64 <__divmodsi4+0xc>
    1e5e:	00 94       	com	r0
    1e60:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__negsi2>
    1e64:	57 fd       	sbrc	r21, 7
    1e66:	07 d0       	rcall	.+14     	; 0x1e76 <__divmodsi4_neg2>
    1e68:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__udivmodsi4>
    1e6c:	07 fc       	sbrc	r0, 7
    1e6e:	03 d0       	rcall	.+6      	; 0x1e76 <__divmodsi4_neg2>
    1e70:	4e f4       	brtc	.+18     	; 0x1e84 <__divmodsi4_exit>
    1e72:	0c 94 43 0f 	jmp	0x1e86	; 0x1e86 <__negsi2>

00001e76 <__divmodsi4_neg2>:
    1e76:	50 95       	com	r21
    1e78:	40 95       	com	r20
    1e7a:	30 95       	com	r19
    1e7c:	21 95       	neg	r18
    1e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e80:	4f 4f       	sbci	r20, 0xFF	; 255
    1e82:	5f 4f       	sbci	r21, 0xFF	; 255

00001e84 <__divmodsi4_exit>:
    1e84:	08 95       	ret

00001e86 <__negsi2>:
    1e86:	90 95       	com	r25
    1e88:	80 95       	com	r24
    1e8a:	70 95       	com	r23
    1e8c:	61 95       	neg	r22
    1e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e90:	8f 4f       	sbci	r24, 0xFF	; 255
    1e92:	9f 4f       	sbci	r25, 0xFF	; 255
    1e94:	08 95       	ret

00001e96 <__tablejump2__>:
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	05 90       	lpm	r0, Z+
    1e9c:	f4 91       	lpm	r31, Z
    1e9e:	e0 2d       	mov	r30, r0
    1ea0:	09 94       	ijmp

00001ea2 <__umulhisi3>:
    1ea2:	a2 9f       	mul	r26, r18
    1ea4:	b0 01       	movw	r22, r0
    1ea6:	b3 9f       	mul	r27, r19
    1ea8:	c0 01       	movw	r24, r0
    1eaa:	a3 9f       	mul	r26, r19
    1eac:	70 0d       	add	r23, r0
    1eae:	81 1d       	adc	r24, r1
    1eb0:	11 24       	eor	r1, r1
    1eb2:	91 1d       	adc	r25, r1
    1eb4:	b2 9f       	mul	r27, r18
    1eb6:	70 0d       	add	r23, r0
    1eb8:	81 1d       	adc	r24, r1
    1eba:	11 24       	eor	r1, r1
    1ebc:	91 1d       	adc	r25, r1
    1ebe:	08 95       	ret

00001ec0 <__ashrdi3>:
    1ec0:	97 fb       	bst	r25, 7
    1ec2:	10 f8       	bld	r1, 0

00001ec4 <__lshrdi3>:
    1ec4:	16 94       	lsr	r1
    1ec6:	00 08       	sbc	r0, r0
    1ec8:	0f 93       	push	r16
    1eca:	08 30       	cpi	r16, 0x08	; 8
    1ecc:	98 f0       	brcs	.+38     	; 0x1ef4 <__lshrdi3+0x30>
    1ece:	08 50       	subi	r16, 0x08	; 8
    1ed0:	23 2f       	mov	r18, r19
    1ed2:	34 2f       	mov	r19, r20
    1ed4:	45 2f       	mov	r20, r21
    1ed6:	56 2f       	mov	r21, r22
    1ed8:	67 2f       	mov	r22, r23
    1eda:	78 2f       	mov	r23, r24
    1edc:	89 2f       	mov	r24, r25
    1ede:	90 2d       	mov	r25, r0
    1ee0:	f4 cf       	rjmp	.-24     	; 0x1eca <__lshrdi3+0x6>
    1ee2:	05 94       	asr	r0
    1ee4:	97 95       	ror	r25
    1ee6:	87 95       	ror	r24
    1ee8:	77 95       	ror	r23
    1eea:	67 95       	ror	r22
    1eec:	57 95       	ror	r21
    1eee:	47 95       	ror	r20
    1ef0:	37 95       	ror	r19
    1ef2:	27 95       	ror	r18
    1ef4:	0a 95       	dec	r16
    1ef6:	aa f7       	brpl	.-22     	; 0x1ee2 <__lshrdi3+0x1e>
    1ef8:	0f 91       	pop	r16
    1efa:	08 95       	ret

00001efc <__cmpdi2_s8>:
    1efc:	00 24       	eor	r0, r0
    1efe:	a7 fd       	sbrc	r26, 7
    1f00:	00 94       	com	r0
    1f02:	2a 17       	cp	r18, r26
    1f04:	30 05       	cpc	r19, r0
    1f06:	40 05       	cpc	r20, r0
    1f08:	50 05       	cpc	r21, r0
    1f0a:	60 05       	cpc	r22, r0
    1f0c:	70 05       	cpc	r23, r0
    1f0e:	80 05       	cpc	r24, r0
    1f10:	90 05       	cpc	r25, r0
    1f12:	08 95       	ret

00001f14 <fgetc>:
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	ec 01       	movw	r28, r24
    1f1a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1c:	20 ff       	sbrs	r18, 0
    1f1e:	33 c0       	rjmp	.+102    	; 0x1f86 <fgetc+0x72>
    1f20:	26 ff       	sbrs	r18, 6
    1f22:	0a c0       	rjmp	.+20     	; 0x1f38 <fgetc+0x24>
    1f24:	2f 7b       	andi	r18, 0xBF	; 191
    1f26:	2b 83       	std	Y+3, r18	; 0x03
    1f28:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	9f 83       	std	Y+7, r25	; 0x07
    1f30:	8e 83       	std	Y+6, r24	; 0x06
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	29 c0       	rjmp	.+82     	; 0x1f8a <fgetc+0x76>
    1f38:	22 ff       	sbrs	r18, 2
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <fgetc+0x46>
    1f3c:	e8 81       	ld	r30, Y
    1f3e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f40:	80 81       	ld	r24, Z
    1f42:	08 2e       	mov	r0, r24
    1f44:	00 0c       	add	r0, r0
    1f46:	99 0b       	sbc	r25, r25
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	19 f4       	brne	.+6      	; 0x1f52 <fgetc+0x3e>
    1f4c:	20 62       	ori	r18, 0x20	; 32
    1f4e:	2b 83       	std	Y+3, r18	; 0x03
    1f50:	1a c0       	rjmp	.+52     	; 0x1f86 <fgetc+0x72>
    1f52:	31 96       	adiw	r30, 0x01	; 1
    1f54:	f9 83       	std	Y+1, r31	; 0x01
    1f56:	e8 83       	st	Y, r30
    1f58:	0e c0       	rjmp	.+28     	; 0x1f76 <fgetc+0x62>
    1f5a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1f5c:	fb 85       	ldd	r31, Y+11	; 0x0b
    1f5e:	09 95       	icall
    1f60:	97 ff       	sbrs	r25, 7
    1f62:	09 c0       	rjmp	.+18     	; 0x1f76 <fgetc+0x62>
    1f64:	2b 81       	ldd	r18, Y+3	; 0x03
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	11 f0       	breq	.+4      	; 0x1f6e <fgetc+0x5a>
    1f6a:	80 e2       	ldi	r24, 0x20	; 32
    1f6c:	01 c0       	rjmp	.+2      	; 0x1f70 <fgetc+0x5c>
    1f6e:	80 e1       	ldi	r24, 0x10	; 16
    1f70:	82 2b       	or	r24, r18
    1f72:	8b 83       	std	Y+3, r24	; 0x03
    1f74:	08 c0       	rjmp	.+16     	; 0x1f86 <fgetc+0x72>
    1f76:	2e 81       	ldd	r18, Y+6	; 0x06
    1f78:	3f 81       	ldd	r19, Y+7	; 0x07
    1f7a:	2f 5f       	subi	r18, 0xFF	; 255
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	3f 83       	std	Y+7, r19	; 0x07
    1f80:	2e 83       	std	Y+6, r18	; 0x06
    1f82:	99 27       	eor	r25, r25
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <fgetc+0x76>
    1f86:	8f ef       	ldi	r24, 0xFF	; 255
    1f88:	9f ef       	ldi	r25, 0xFF	; 255
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	08 95       	ret

00001f90 <printf_P>:
    1f90:	a0 e0       	ldi	r26, 0x00	; 0
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	ee ec       	ldi	r30, 0xCE	; 206
    1f96:	ff e0       	ldi	r31, 0x0F	; 15
    1f98:	0c 94 af 12 	jmp	0x255e	; 0x255e <__prologue_saves__+0x1c>
    1f9c:	ae 01       	movw	r20, r28
    1f9e:	49 5f       	subi	r20, 0xF9	; 249
    1fa0:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa2:	da 01       	movw	r26, r20
    1fa4:	6d 91       	ld	r22, X+
    1fa6:	7d 91       	ld	r23, X+
    1fa8:	ad 01       	movw	r20, r26
    1faa:	0e ea       	ldi	r16, 0xAE	; 174
    1fac:	12 e0       	ldi	r17, 0x02	; 2
    1fae:	f8 01       	movw	r30, r16
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	13 96       	adiw	r26, 0x03	; 3
    1fb8:	2c 91       	ld	r18, X
    1fba:	13 97       	sbiw	r26, 0x03	; 3
    1fbc:	28 60       	ori	r18, 0x08	; 8
    1fbe:	13 96       	adiw	r26, 0x03	; 3
    1fc0:	2c 93       	st	X, r18
    1fc2:	0e 94 10 10 	call	0x2020	; 0x2020 <vfprintf>
    1fc6:	d8 01       	movw	r26, r16
    1fc8:	12 96       	adiw	r26, 0x02	; 2
    1fca:	ed 91       	ld	r30, X+
    1fcc:	fc 91       	ld	r31, X
    1fce:	13 97       	sbiw	r26, 0x03	; 3
    1fd0:	23 81       	ldd	r18, Z+3	; 0x03
    1fd2:	27 7f       	andi	r18, 0xF7	; 247
    1fd4:	23 83       	std	Z+3, r18	; 0x03
    1fd6:	e4 e0       	ldi	r30, 0x04	; 4
    1fd8:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__epilogue_restores__+0x1c>

00001fdc <sprintf>:
    1fdc:	ae e0       	ldi	r26, 0x0E	; 14
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e4 ef       	ldi	r30, 0xF4	; 244
    1fe2:	ff e0       	ldi	r31, 0x0F	; 15
    1fe4:	0c 94 af 12 	jmp	0x255e	; 0x255e <__prologue_saves__+0x1c>
    1fe8:	0d 89       	ldd	r16, Y+21	; 0x15
    1fea:	1e 89       	ldd	r17, Y+22	; 0x16
    1fec:	86 e0       	ldi	r24, 0x06	; 6
    1fee:	8c 83       	std	Y+4, r24	; 0x04
    1ff0:	1a 83       	std	Y+2, r17	; 0x02
    1ff2:	09 83       	std	Y+1, r16	; 0x01
    1ff4:	8f ef       	ldi	r24, 0xFF	; 255
    1ff6:	9f e7       	ldi	r25, 0x7F	; 127
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	ae 01       	movw	r20, r28
    1ffe:	47 5e       	subi	r20, 0xE7	; 231
    2000:	5f 4f       	sbci	r21, 0xFF	; 255
    2002:	6f 89       	ldd	r22, Y+23	; 0x17
    2004:	78 8d       	ldd	r23, Y+24	; 0x18
    2006:	ce 01       	movw	r24, r28
    2008:	01 96       	adiw	r24, 0x01	; 1
    200a:	0e 94 10 10 	call	0x2020	; 0x2020 <vfprintf>
    200e:	ef 81       	ldd	r30, Y+7	; 0x07
    2010:	f8 85       	ldd	r31, Y+8	; 0x08
    2012:	e0 0f       	add	r30, r16
    2014:	f1 1f       	adc	r31, r17
    2016:	10 82       	st	Z, r1
    2018:	2e 96       	adiw	r28, 0x0e	; 14
    201a:	e4 e0       	ldi	r30, 0x04	; 4
    201c:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__epilogue_restores__+0x1c>

00002020 <vfprintf>:
    2020:	ab e0       	ldi	r26, 0x0B	; 11
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e1       	ldi	r30, 0x16	; 22
    2026:	f0 e1       	ldi	r31, 0x10	; 16
    2028:	0c 94 a1 12 	jmp	0x2542	; 0x2542 <__prologue_saves__>
    202c:	6c 01       	movw	r12, r24
    202e:	7b 01       	movw	r14, r22
    2030:	8a 01       	movw	r16, r20
    2032:	fc 01       	movw	r30, r24
    2034:	17 82       	std	Z+7, r1	; 0x07
    2036:	16 82       	std	Z+6, r1	; 0x06
    2038:	83 81       	ldd	r24, Z+3	; 0x03
    203a:	81 ff       	sbrs	r24, 1
    203c:	cc c1       	rjmp	.+920    	; 0x23d6 <vfprintf+0x3b6>
    203e:	ce 01       	movw	r24, r28
    2040:	01 96       	adiw	r24, 0x01	; 1
    2042:	3c 01       	movw	r6, r24
    2044:	f6 01       	movw	r30, r12
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	f7 01       	movw	r30, r14
    204a:	93 fd       	sbrc	r25, 3
    204c:	85 91       	lpm	r24, Z+
    204e:	93 ff       	sbrs	r25, 3
    2050:	81 91       	ld	r24, Z+
    2052:	7f 01       	movw	r14, r30
    2054:	88 23       	and	r24, r24
    2056:	09 f4       	brne	.+2      	; 0x205a <vfprintf+0x3a>
    2058:	ba c1       	rjmp	.+884    	; 0x23ce <vfprintf+0x3ae>
    205a:	85 32       	cpi	r24, 0x25	; 37
    205c:	39 f4       	brne	.+14     	; 0x206c <vfprintf+0x4c>
    205e:	93 fd       	sbrc	r25, 3
    2060:	85 91       	lpm	r24, Z+
    2062:	93 ff       	sbrs	r25, 3
    2064:	81 91       	ld	r24, Z+
    2066:	7f 01       	movw	r14, r30
    2068:	85 32       	cpi	r24, 0x25	; 37
    206a:	29 f4       	brne	.+10     	; 0x2076 <vfprintf+0x56>
    206c:	b6 01       	movw	r22, r12
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    2074:	e7 cf       	rjmp	.-50     	; 0x2044 <vfprintf+0x24>
    2076:	91 2c       	mov	r9, r1
    2078:	21 2c       	mov	r2, r1
    207a:	31 2c       	mov	r3, r1
    207c:	ff e1       	ldi	r31, 0x1F	; 31
    207e:	f3 15       	cp	r31, r3
    2080:	d8 f0       	brcs	.+54     	; 0x20b8 <vfprintf+0x98>
    2082:	8b 32       	cpi	r24, 0x2B	; 43
    2084:	79 f0       	breq	.+30     	; 0x20a4 <vfprintf+0x84>
    2086:	38 f4       	brcc	.+14     	; 0x2096 <vfprintf+0x76>
    2088:	80 32       	cpi	r24, 0x20	; 32
    208a:	79 f0       	breq	.+30     	; 0x20aa <vfprintf+0x8a>
    208c:	83 32       	cpi	r24, 0x23	; 35
    208e:	a1 f4       	brne	.+40     	; 0x20b8 <vfprintf+0x98>
    2090:	23 2d       	mov	r18, r3
    2092:	20 61       	ori	r18, 0x10	; 16
    2094:	1d c0       	rjmp	.+58     	; 0x20d0 <vfprintf+0xb0>
    2096:	8d 32       	cpi	r24, 0x2D	; 45
    2098:	61 f0       	breq	.+24     	; 0x20b2 <vfprintf+0x92>
    209a:	80 33       	cpi	r24, 0x30	; 48
    209c:	69 f4       	brne	.+26     	; 0x20b8 <vfprintf+0x98>
    209e:	23 2d       	mov	r18, r3
    20a0:	21 60       	ori	r18, 0x01	; 1
    20a2:	16 c0       	rjmp	.+44     	; 0x20d0 <vfprintf+0xb0>
    20a4:	83 2d       	mov	r24, r3
    20a6:	82 60       	ori	r24, 0x02	; 2
    20a8:	38 2e       	mov	r3, r24
    20aa:	e3 2d       	mov	r30, r3
    20ac:	e4 60       	ori	r30, 0x04	; 4
    20ae:	3e 2e       	mov	r3, r30
    20b0:	2a c0       	rjmp	.+84     	; 0x2106 <vfprintf+0xe6>
    20b2:	f3 2d       	mov	r31, r3
    20b4:	f8 60       	ori	r31, 0x08	; 8
    20b6:	1d c0       	rjmp	.+58     	; 0x20f2 <vfprintf+0xd2>
    20b8:	37 fc       	sbrc	r3, 7
    20ba:	2d c0       	rjmp	.+90     	; 0x2116 <vfprintf+0xf6>
    20bc:	20 ed       	ldi	r18, 0xD0	; 208
    20be:	28 0f       	add	r18, r24
    20c0:	2a 30       	cpi	r18, 0x0A	; 10
    20c2:	40 f0       	brcs	.+16     	; 0x20d4 <vfprintf+0xb4>
    20c4:	8e 32       	cpi	r24, 0x2E	; 46
    20c6:	b9 f4       	brne	.+46     	; 0x20f6 <vfprintf+0xd6>
    20c8:	36 fc       	sbrc	r3, 6
    20ca:	81 c1       	rjmp	.+770    	; 0x23ce <vfprintf+0x3ae>
    20cc:	23 2d       	mov	r18, r3
    20ce:	20 64       	ori	r18, 0x40	; 64
    20d0:	32 2e       	mov	r3, r18
    20d2:	19 c0       	rjmp	.+50     	; 0x2106 <vfprintf+0xe6>
    20d4:	36 fe       	sbrs	r3, 6
    20d6:	06 c0       	rjmp	.+12     	; 0x20e4 <vfprintf+0xc4>
    20d8:	8a e0       	ldi	r24, 0x0A	; 10
    20da:	98 9e       	mul	r9, r24
    20dc:	20 0d       	add	r18, r0
    20de:	11 24       	eor	r1, r1
    20e0:	92 2e       	mov	r9, r18
    20e2:	11 c0       	rjmp	.+34     	; 0x2106 <vfprintf+0xe6>
    20e4:	ea e0       	ldi	r30, 0x0A	; 10
    20e6:	2e 9e       	mul	r2, r30
    20e8:	20 0d       	add	r18, r0
    20ea:	11 24       	eor	r1, r1
    20ec:	22 2e       	mov	r2, r18
    20ee:	f3 2d       	mov	r31, r3
    20f0:	f0 62       	ori	r31, 0x20	; 32
    20f2:	3f 2e       	mov	r3, r31
    20f4:	08 c0       	rjmp	.+16     	; 0x2106 <vfprintf+0xe6>
    20f6:	8c 36       	cpi	r24, 0x6C	; 108
    20f8:	21 f4       	brne	.+8      	; 0x2102 <vfprintf+0xe2>
    20fa:	83 2d       	mov	r24, r3
    20fc:	80 68       	ori	r24, 0x80	; 128
    20fe:	38 2e       	mov	r3, r24
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <vfprintf+0xe6>
    2102:	88 36       	cpi	r24, 0x68	; 104
    2104:	41 f4       	brne	.+16     	; 0x2116 <vfprintf+0xf6>
    2106:	f7 01       	movw	r30, r14
    2108:	93 fd       	sbrc	r25, 3
    210a:	85 91       	lpm	r24, Z+
    210c:	93 ff       	sbrs	r25, 3
    210e:	81 91       	ld	r24, Z+
    2110:	7f 01       	movw	r14, r30
    2112:	81 11       	cpse	r24, r1
    2114:	b3 cf       	rjmp	.-154    	; 0x207c <vfprintf+0x5c>
    2116:	98 2f       	mov	r25, r24
    2118:	9f 7d       	andi	r25, 0xDF	; 223
    211a:	95 54       	subi	r25, 0x45	; 69
    211c:	93 30       	cpi	r25, 0x03	; 3
    211e:	28 f4       	brcc	.+10     	; 0x212a <vfprintf+0x10a>
    2120:	0c 5f       	subi	r16, 0xFC	; 252
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
    2124:	9f e3       	ldi	r25, 0x3F	; 63
    2126:	99 83       	std	Y+1, r25	; 0x01
    2128:	0d c0       	rjmp	.+26     	; 0x2144 <vfprintf+0x124>
    212a:	83 36       	cpi	r24, 0x63	; 99
    212c:	31 f0       	breq	.+12     	; 0x213a <vfprintf+0x11a>
    212e:	83 37       	cpi	r24, 0x73	; 115
    2130:	71 f0       	breq	.+28     	; 0x214e <vfprintf+0x12e>
    2132:	83 35       	cpi	r24, 0x53	; 83
    2134:	09 f0       	breq	.+2      	; 0x2138 <vfprintf+0x118>
    2136:	59 c0       	rjmp	.+178    	; 0x21ea <vfprintf+0x1ca>
    2138:	21 c0       	rjmp	.+66     	; 0x217c <vfprintf+0x15c>
    213a:	f8 01       	movw	r30, r16
    213c:	80 81       	ld	r24, Z
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	0e 5f       	subi	r16, 0xFE	; 254
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	88 24       	eor	r8, r8
    2146:	83 94       	inc	r8
    2148:	91 2c       	mov	r9, r1
    214a:	53 01       	movw	r10, r6
    214c:	13 c0       	rjmp	.+38     	; 0x2174 <vfprintf+0x154>
    214e:	28 01       	movw	r4, r16
    2150:	f2 e0       	ldi	r31, 0x02	; 2
    2152:	4f 0e       	add	r4, r31
    2154:	51 1c       	adc	r5, r1
    2156:	f8 01       	movw	r30, r16
    2158:	a0 80       	ld	r10, Z
    215a:	b1 80       	ldd	r11, Z+1	; 0x01
    215c:	36 fe       	sbrs	r3, 6
    215e:	03 c0       	rjmp	.+6      	; 0x2166 <vfprintf+0x146>
    2160:	69 2d       	mov	r22, r9
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	02 c0       	rjmp	.+4      	; 0x216a <vfprintf+0x14a>
    2166:	6f ef       	ldi	r22, 0xFF	; 255
    2168:	7f ef       	ldi	r23, 0xFF	; 255
    216a:	c5 01       	movw	r24, r10
    216c:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <strnlen>
    2170:	4c 01       	movw	r8, r24
    2172:	82 01       	movw	r16, r4
    2174:	f3 2d       	mov	r31, r3
    2176:	ff 77       	andi	r31, 0x7F	; 127
    2178:	3f 2e       	mov	r3, r31
    217a:	16 c0       	rjmp	.+44     	; 0x21a8 <vfprintf+0x188>
    217c:	28 01       	movw	r4, r16
    217e:	22 e0       	ldi	r18, 0x02	; 2
    2180:	42 0e       	add	r4, r18
    2182:	51 1c       	adc	r5, r1
    2184:	f8 01       	movw	r30, r16
    2186:	a0 80       	ld	r10, Z
    2188:	b1 80       	ldd	r11, Z+1	; 0x01
    218a:	36 fe       	sbrs	r3, 6
    218c:	03 c0       	rjmp	.+6      	; 0x2194 <vfprintf+0x174>
    218e:	69 2d       	mov	r22, r9
    2190:	70 e0       	ldi	r23, 0x00	; 0
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <vfprintf+0x178>
    2194:	6f ef       	ldi	r22, 0xFF	; 255
    2196:	7f ef       	ldi	r23, 0xFF	; 255
    2198:	c5 01       	movw	r24, r10
    219a:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <strnlen_P>
    219e:	4c 01       	movw	r8, r24
    21a0:	f3 2d       	mov	r31, r3
    21a2:	f0 68       	ori	r31, 0x80	; 128
    21a4:	3f 2e       	mov	r3, r31
    21a6:	82 01       	movw	r16, r4
    21a8:	33 fc       	sbrc	r3, 3
    21aa:	1b c0       	rjmp	.+54     	; 0x21e2 <vfprintf+0x1c2>
    21ac:	82 2d       	mov	r24, r2
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	88 16       	cp	r8, r24
    21b2:	99 06       	cpc	r9, r25
    21b4:	b0 f4       	brcc	.+44     	; 0x21e2 <vfprintf+0x1c2>
    21b6:	b6 01       	movw	r22, r12
    21b8:	80 e2       	ldi	r24, 0x20	; 32
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    21c0:	2a 94       	dec	r2
    21c2:	f4 cf       	rjmp	.-24     	; 0x21ac <vfprintf+0x18c>
    21c4:	f5 01       	movw	r30, r10
    21c6:	37 fc       	sbrc	r3, 7
    21c8:	85 91       	lpm	r24, Z+
    21ca:	37 fe       	sbrs	r3, 7
    21cc:	81 91       	ld	r24, Z+
    21ce:	5f 01       	movw	r10, r30
    21d0:	b6 01       	movw	r22, r12
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    21d8:	21 10       	cpse	r2, r1
    21da:	2a 94       	dec	r2
    21dc:	21 e0       	ldi	r18, 0x01	; 1
    21de:	82 1a       	sub	r8, r18
    21e0:	91 08       	sbc	r9, r1
    21e2:	81 14       	cp	r8, r1
    21e4:	91 04       	cpc	r9, r1
    21e6:	71 f7       	brne	.-36     	; 0x21c4 <vfprintf+0x1a4>
    21e8:	e8 c0       	rjmp	.+464    	; 0x23ba <vfprintf+0x39a>
    21ea:	84 36       	cpi	r24, 0x64	; 100
    21ec:	11 f0       	breq	.+4      	; 0x21f2 <vfprintf+0x1d2>
    21ee:	89 36       	cpi	r24, 0x69	; 105
    21f0:	41 f5       	brne	.+80     	; 0x2242 <vfprintf+0x222>
    21f2:	f8 01       	movw	r30, r16
    21f4:	37 fe       	sbrs	r3, 7
    21f6:	07 c0       	rjmp	.+14     	; 0x2206 <vfprintf+0x1e6>
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	0c 5f       	subi	r16, 0xFC	; 252
    2202:	1f 4f       	sbci	r17, 0xFF	; 255
    2204:	08 c0       	rjmp	.+16     	; 0x2216 <vfprintf+0x1f6>
    2206:	60 81       	ld	r22, Z
    2208:	71 81       	ldd	r23, Z+1	; 0x01
    220a:	07 2e       	mov	r0, r23
    220c:	00 0c       	add	r0, r0
    220e:	88 0b       	sbc	r24, r24
    2210:	99 0b       	sbc	r25, r25
    2212:	0e 5f       	subi	r16, 0xFE	; 254
    2214:	1f 4f       	sbci	r17, 0xFF	; 255
    2216:	f3 2d       	mov	r31, r3
    2218:	ff 76       	andi	r31, 0x6F	; 111
    221a:	3f 2e       	mov	r3, r31
    221c:	97 ff       	sbrs	r25, 7
    221e:	09 c0       	rjmp	.+18     	; 0x2232 <vfprintf+0x212>
    2220:	90 95       	com	r25
    2222:	80 95       	com	r24
    2224:	70 95       	com	r23
    2226:	61 95       	neg	r22
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	8f 4f       	sbci	r24, 0xFF	; 255
    222c:	9f 4f       	sbci	r25, 0xFF	; 255
    222e:	f0 68       	ori	r31, 0x80	; 128
    2230:	3f 2e       	mov	r3, r31
    2232:	2a e0       	ldi	r18, 0x0A	; 10
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	a3 01       	movw	r20, r6
    2238:	0e 94 43 12 	call	0x2486	; 0x2486 <__ultoa_invert>
    223c:	88 2e       	mov	r8, r24
    223e:	86 18       	sub	r8, r6
    2240:	45 c0       	rjmp	.+138    	; 0x22cc <vfprintf+0x2ac>
    2242:	85 37       	cpi	r24, 0x75	; 117
    2244:	31 f4       	brne	.+12     	; 0x2252 <vfprintf+0x232>
    2246:	23 2d       	mov	r18, r3
    2248:	2f 7e       	andi	r18, 0xEF	; 239
    224a:	b2 2e       	mov	r11, r18
    224c:	2a e0       	ldi	r18, 0x0A	; 10
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	25 c0       	rjmp	.+74     	; 0x229c <vfprintf+0x27c>
    2252:	93 2d       	mov	r25, r3
    2254:	99 7f       	andi	r25, 0xF9	; 249
    2256:	b9 2e       	mov	r11, r25
    2258:	8f 36       	cpi	r24, 0x6F	; 111
    225a:	c1 f0       	breq	.+48     	; 0x228c <vfprintf+0x26c>
    225c:	18 f4       	brcc	.+6      	; 0x2264 <vfprintf+0x244>
    225e:	88 35       	cpi	r24, 0x58	; 88
    2260:	79 f0       	breq	.+30     	; 0x2280 <vfprintf+0x260>
    2262:	b5 c0       	rjmp	.+362    	; 0x23ce <vfprintf+0x3ae>
    2264:	80 37       	cpi	r24, 0x70	; 112
    2266:	19 f0       	breq	.+6      	; 0x226e <vfprintf+0x24e>
    2268:	88 37       	cpi	r24, 0x78	; 120
    226a:	21 f0       	breq	.+8      	; 0x2274 <vfprintf+0x254>
    226c:	b0 c0       	rjmp	.+352    	; 0x23ce <vfprintf+0x3ae>
    226e:	e9 2f       	mov	r30, r25
    2270:	e0 61       	ori	r30, 0x10	; 16
    2272:	be 2e       	mov	r11, r30
    2274:	b4 fe       	sbrs	r11, 4
    2276:	0d c0       	rjmp	.+26     	; 0x2292 <vfprintf+0x272>
    2278:	fb 2d       	mov	r31, r11
    227a:	f4 60       	ori	r31, 0x04	; 4
    227c:	bf 2e       	mov	r11, r31
    227e:	09 c0       	rjmp	.+18     	; 0x2292 <vfprintf+0x272>
    2280:	34 fe       	sbrs	r3, 4
    2282:	0a c0       	rjmp	.+20     	; 0x2298 <vfprintf+0x278>
    2284:	29 2f       	mov	r18, r25
    2286:	26 60       	ori	r18, 0x06	; 6
    2288:	b2 2e       	mov	r11, r18
    228a:	06 c0       	rjmp	.+12     	; 0x2298 <vfprintf+0x278>
    228c:	28 e0       	ldi	r18, 0x08	; 8
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	05 c0       	rjmp	.+10     	; 0x229c <vfprintf+0x27c>
    2292:	20 e1       	ldi	r18, 0x10	; 16
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	02 c0       	rjmp	.+4      	; 0x229c <vfprintf+0x27c>
    2298:	20 e1       	ldi	r18, 0x10	; 16
    229a:	32 e0       	ldi	r19, 0x02	; 2
    229c:	f8 01       	movw	r30, r16
    229e:	b7 fe       	sbrs	r11, 7
    22a0:	07 c0       	rjmp	.+14     	; 0x22b0 <vfprintf+0x290>
    22a2:	60 81       	ld	r22, Z
    22a4:	71 81       	ldd	r23, Z+1	; 0x01
    22a6:	82 81       	ldd	r24, Z+2	; 0x02
    22a8:	93 81       	ldd	r25, Z+3	; 0x03
    22aa:	0c 5f       	subi	r16, 0xFC	; 252
    22ac:	1f 4f       	sbci	r17, 0xFF	; 255
    22ae:	06 c0       	rjmp	.+12     	; 0x22bc <vfprintf+0x29c>
    22b0:	60 81       	ld	r22, Z
    22b2:	71 81       	ldd	r23, Z+1	; 0x01
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 5f       	subi	r16, 0xFE	; 254
    22ba:	1f 4f       	sbci	r17, 0xFF	; 255
    22bc:	a3 01       	movw	r20, r6
    22be:	0e 94 43 12 	call	0x2486	; 0x2486 <__ultoa_invert>
    22c2:	88 2e       	mov	r8, r24
    22c4:	86 18       	sub	r8, r6
    22c6:	fb 2d       	mov	r31, r11
    22c8:	ff 77       	andi	r31, 0x7F	; 127
    22ca:	3f 2e       	mov	r3, r31
    22cc:	36 fe       	sbrs	r3, 6
    22ce:	0d c0       	rjmp	.+26     	; 0x22ea <vfprintf+0x2ca>
    22d0:	23 2d       	mov	r18, r3
    22d2:	2e 7f       	andi	r18, 0xFE	; 254
    22d4:	a2 2e       	mov	r10, r18
    22d6:	89 14       	cp	r8, r9
    22d8:	58 f4       	brcc	.+22     	; 0x22f0 <vfprintf+0x2d0>
    22da:	34 fe       	sbrs	r3, 4
    22dc:	0b c0       	rjmp	.+22     	; 0x22f4 <vfprintf+0x2d4>
    22de:	32 fc       	sbrc	r3, 2
    22e0:	09 c0       	rjmp	.+18     	; 0x22f4 <vfprintf+0x2d4>
    22e2:	83 2d       	mov	r24, r3
    22e4:	8e 7e       	andi	r24, 0xEE	; 238
    22e6:	a8 2e       	mov	r10, r24
    22e8:	05 c0       	rjmp	.+10     	; 0x22f4 <vfprintf+0x2d4>
    22ea:	b8 2c       	mov	r11, r8
    22ec:	a3 2c       	mov	r10, r3
    22ee:	03 c0       	rjmp	.+6      	; 0x22f6 <vfprintf+0x2d6>
    22f0:	b8 2c       	mov	r11, r8
    22f2:	01 c0       	rjmp	.+2      	; 0x22f6 <vfprintf+0x2d6>
    22f4:	b9 2c       	mov	r11, r9
    22f6:	a4 fe       	sbrs	r10, 4
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <vfprintf+0x2f8>
    22fa:	fe 01       	movw	r30, r28
    22fc:	e8 0d       	add	r30, r8
    22fe:	f1 1d       	adc	r31, r1
    2300:	80 81       	ld	r24, Z
    2302:	80 33       	cpi	r24, 0x30	; 48
    2304:	21 f4       	brne	.+8      	; 0x230e <vfprintf+0x2ee>
    2306:	9a 2d       	mov	r25, r10
    2308:	99 7e       	andi	r25, 0xE9	; 233
    230a:	a9 2e       	mov	r10, r25
    230c:	09 c0       	rjmp	.+18     	; 0x2320 <vfprintf+0x300>
    230e:	a2 fe       	sbrs	r10, 2
    2310:	06 c0       	rjmp	.+12     	; 0x231e <vfprintf+0x2fe>
    2312:	b3 94       	inc	r11
    2314:	b3 94       	inc	r11
    2316:	04 c0       	rjmp	.+8      	; 0x2320 <vfprintf+0x300>
    2318:	8a 2d       	mov	r24, r10
    231a:	86 78       	andi	r24, 0x86	; 134
    231c:	09 f0       	breq	.+2      	; 0x2320 <vfprintf+0x300>
    231e:	b3 94       	inc	r11
    2320:	a3 fc       	sbrc	r10, 3
    2322:	11 c0       	rjmp	.+34     	; 0x2346 <vfprintf+0x326>
    2324:	a0 fe       	sbrs	r10, 0
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <vfprintf+0x314>
    2328:	b2 14       	cp	r11, r2
    232a:	88 f4       	brcc	.+34     	; 0x234e <vfprintf+0x32e>
    232c:	28 0c       	add	r2, r8
    232e:	92 2c       	mov	r9, r2
    2330:	9b 18       	sub	r9, r11
    2332:	0e c0       	rjmp	.+28     	; 0x2350 <vfprintf+0x330>
    2334:	b2 14       	cp	r11, r2
    2336:	60 f4       	brcc	.+24     	; 0x2350 <vfprintf+0x330>
    2338:	b6 01       	movw	r22, r12
    233a:	80 e2       	ldi	r24, 0x20	; 32
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    2342:	b3 94       	inc	r11
    2344:	f7 cf       	rjmp	.-18     	; 0x2334 <vfprintf+0x314>
    2346:	b2 14       	cp	r11, r2
    2348:	18 f4       	brcc	.+6      	; 0x2350 <vfprintf+0x330>
    234a:	2b 18       	sub	r2, r11
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <vfprintf+0x332>
    234e:	98 2c       	mov	r9, r8
    2350:	21 2c       	mov	r2, r1
    2352:	a4 fe       	sbrs	r10, 4
    2354:	10 c0       	rjmp	.+32     	; 0x2376 <vfprintf+0x356>
    2356:	b6 01       	movw	r22, r12
    2358:	80 e3       	ldi	r24, 0x30	; 48
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    2360:	a2 fe       	sbrs	r10, 2
    2362:	17 c0       	rjmp	.+46     	; 0x2392 <vfprintf+0x372>
    2364:	a1 fc       	sbrc	r10, 1
    2366:	03 c0       	rjmp	.+6      	; 0x236e <vfprintf+0x34e>
    2368:	88 e7       	ldi	r24, 0x78	; 120
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <vfprintf+0x352>
    236e:	88 e5       	ldi	r24, 0x58	; 88
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	b6 01       	movw	r22, r12
    2374:	0c c0       	rjmp	.+24     	; 0x238e <vfprintf+0x36e>
    2376:	8a 2d       	mov	r24, r10
    2378:	86 78       	andi	r24, 0x86	; 134
    237a:	59 f0       	breq	.+22     	; 0x2392 <vfprintf+0x372>
    237c:	a1 fe       	sbrs	r10, 1
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <vfprintf+0x364>
    2380:	8b e2       	ldi	r24, 0x2B	; 43
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <vfprintf+0x366>
    2384:	80 e2       	ldi	r24, 0x20	; 32
    2386:	a7 fc       	sbrc	r10, 7
    2388:	8d e2       	ldi	r24, 0x2D	; 45
    238a:	b6 01       	movw	r22, r12
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    2392:	89 14       	cp	r8, r9
    2394:	38 f4       	brcc	.+14     	; 0x23a4 <vfprintf+0x384>
    2396:	b6 01       	movw	r22, r12
    2398:	80 e3       	ldi	r24, 0x30	; 48
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    23a0:	9a 94       	dec	r9
    23a2:	f7 cf       	rjmp	.-18     	; 0x2392 <vfprintf+0x372>
    23a4:	8a 94       	dec	r8
    23a6:	f3 01       	movw	r30, r6
    23a8:	e8 0d       	add	r30, r8
    23aa:	f1 1d       	adc	r31, r1
    23ac:	80 81       	ld	r24, Z
    23ae:	b6 01       	movw	r22, r12
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    23b6:	81 10       	cpse	r8, r1
    23b8:	f5 cf       	rjmp	.-22     	; 0x23a4 <vfprintf+0x384>
    23ba:	22 20       	and	r2, r2
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <vfprintf+0x3a0>
    23be:	42 ce       	rjmp	.-892    	; 0x2044 <vfprintf+0x24>
    23c0:	b6 01       	movw	r22, r12
    23c2:	80 e2       	ldi	r24, 0x20	; 32
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 07 12 	call	0x240e	; 0x240e <fputc>
    23ca:	2a 94       	dec	r2
    23cc:	f6 cf       	rjmp	.-20     	; 0x23ba <vfprintf+0x39a>
    23ce:	f6 01       	movw	r30, r12
    23d0:	86 81       	ldd	r24, Z+6	; 0x06
    23d2:	97 81       	ldd	r25, Z+7	; 0x07
    23d4:	02 c0       	rjmp	.+4      	; 0x23da <vfprintf+0x3ba>
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	9f ef       	ldi	r25, 0xFF	; 255
    23da:	2b 96       	adiw	r28, 0x0b	; 11
    23dc:	e2 e1       	ldi	r30, 0x12	; 18
    23de:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__epilogue_restores__>

000023e2 <strnlen_P>:
    23e2:	fc 01       	movw	r30, r24
    23e4:	05 90       	lpm	r0, Z+
    23e6:	61 50       	subi	r22, 0x01	; 1
    23e8:	70 40       	sbci	r23, 0x00	; 0
    23ea:	01 10       	cpse	r0, r1
    23ec:	d8 f7       	brcc	.-10     	; 0x23e4 <strnlen_P+0x2>
    23ee:	80 95       	com	r24
    23f0:	90 95       	com	r25
    23f2:	8e 0f       	add	r24, r30
    23f4:	9f 1f       	adc	r25, r31
    23f6:	08 95       	ret

000023f8 <strnlen>:
    23f8:	fc 01       	movw	r30, r24
    23fa:	61 50       	subi	r22, 0x01	; 1
    23fc:	70 40       	sbci	r23, 0x00	; 0
    23fe:	01 90       	ld	r0, Z+
    2400:	01 10       	cpse	r0, r1
    2402:	d8 f7       	brcc	.-10     	; 0x23fa <strnlen+0x2>
    2404:	80 95       	com	r24
    2406:	90 95       	com	r25
    2408:	8e 0f       	add	r24, r30
    240a:	9f 1f       	adc	r25, r31
    240c:	08 95       	ret

0000240e <fputc>:
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	fb 01       	movw	r30, r22
    2418:	23 81       	ldd	r18, Z+3	; 0x03
    241a:	21 fd       	sbrc	r18, 1
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <fputc+0x16>
    241e:	8f ef       	ldi	r24, 0xFF	; 255
    2420:	9f ef       	ldi	r25, 0xFF	; 255
    2422:	2c c0       	rjmp	.+88     	; 0x247c <fputc+0x6e>
    2424:	22 ff       	sbrs	r18, 2
    2426:	16 c0       	rjmp	.+44     	; 0x2454 <fputc+0x46>
    2428:	46 81       	ldd	r20, Z+6	; 0x06
    242a:	57 81       	ldd	r21, Z+7	; 0x07
    242c:	24 81       	ldd	r18, Z+4	; 0x04
    242e:	35 81       	ldd	r19, Z+5	; 0x05
    2430:	42 17       	cp	r20, r18
    2432:	53 07       	cpc	r21, r19
    2434:	44 f4       	brge	.+16     	; 0x2446 <fputc+0x38>
    2436:	a0 81       	ld	r26, Z
    2438:	b1 81       	ldd	r27, Z+1	; 0x01
    243a:	9d 01       	movw	r18, r26
    243c:	2f 5f       	subi	r18, 0xFF	; 255
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	31 83       	std	Z+1, r19	; 0x01
    2442:	20 83       	st	Z, r18
    2444:	8c 93       	st	X, r24
    2446:	26 81       	ldd	r18, Z+6	; 0x06
    2448:	37 81       	ldd	r19, Z+7	; 0x07
    244a:	2f 5f       	subi	r18, 0xFF	; 255
    244c:	3f 4f       	sbci	r19, 0xFF	; 255
    244e:	37 83       	std	Z+7, r19	; 0x07
    2450:	26 83       	std	Z+6, r18	; 0x06
    2452:	14 c0       	rjmp	.+40     	; 0x247c <fputc+0x6e>
    2454:	8b 01       	movw	r16, r22
    2456:	ec 01       	movw	r28, r24
    2458:	fb 01       	movw	r30, r22
    245a:	00 84       	ldd	r0, Z+8	; 0x08
    245c:	f1 85       	ldd	r31, Z+9	; 0x09
    245e:	e0 2d       	mov	r30, r0
    2460:	09 95       	icall
    2462:	89 2b       	or	r24, r25
    2464:	e1 f6       	brne	.-72     	; 0x241e <fputc+0x10>
    2466:	d8 01       	movw	r26, r16
    2468:	16 96       	adiw	r26, 0x06	; 6
    246a:	8d 91       	ld	r24, X+
    246c:	9c 91       	ld	r25, X
    246e:	17 97       	sbiw	r26, 0x07	; 7
    2470:	01 96       	adiw	r24, 0x01	; 1
    2472:	17 96       	adiw	r26, 0x07	; 7
    2474:	9c 93       	st	X, r25
    2476:	8e 93       	st	-X, r24
    2478:	16 97       	sbiw	r26, 0x06	; 6
    247a:	ce 01       	movw	r24, r28
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	0f 91       	pop	r16
    2484:	08 95       	ret

00002486 <__ultoa_invert>:
    2486:	fa 01       	movw	r30, r20
    2488:	aa 27       	eor	r26, r26
    248a:	28 30       	cpi	r18, 0x08	; 8
    248c:	51 f1       	breq	.+84     	; 0x24e2 <__ultoa_invert+0x5c>
    248e:	20 31       	cpi	r18, 0x10	; 16
    2490:	81 f1       	breq	.+96     	; 0x24f2 <__ultoa_invert+0x6c>
    2492:	e8 94       	clt
    2494:	6f 93       	push	r22
    2496:	6e 7f       	andi	r22, 0xFE	; 254
    2498:	6e 5f       	subi	r22, 0xFE	; 254
    249a:	7f 4f       	sbci	r23, 0xFF	; 255
    249c:	8f 4f       	sbci	r24, 0xFF	; 255
    249e:	9f 4f       	sbci	r25, 0xFF	; 255
    24a0:	af 4f       	sbci	r26, 0xFF	; 255
    24a2:	b1 e0       	ldi	r27, 0x01	; 1
    24a4:	3e d0       	rcall	.+124    	; 0x2522 <__ultoa_invert+0x9c>
    24a6:	b4 e0       	ldi	r27, 0x04	; 4
    24a8:	3c d0       	rcall	.+120    	; 0x2522 <__ultoa_invert+0x9c>
    24aa:	67 0f       	add	r22, r23
    24ac:	78 1f       	adc	r23, r24
    24ae:	89 1f       	adc	r24, r25
    24b0:	9a 1f       	adc	r25, r26
    24b2:	a1 1d       	adc	r26, r1
    24b4:	68 0f       	add	r22, r24
    24b6:	79 1f       	adc	r23, r25
    24b8:	8a 1f       	adc	r24, r26
    24ba:	91 1d       	adc	r25, r1
    24bc:	a1 1d       	adc	r26, r1
    24be:	6a 0f       	add	r22, r26
    24c0:	71 1d       	adc	r23, r1
    24c2:	81 1d       	adc	r24, r1
    24c4:	91 1d       	adc	r25, r1
    24c6:	a1 1d       	adc	r26, r1
    24c8:	20 d0       	rcall	.+64     	; 0x250a <__ultoa_invert+0x84>
    24ca:	09 f4       	brne	.+2      	; 0x24ce <__ultoa_invert+0x48>
    24cc:	68 94       	set
    24ce:	3f 91       	pop	r19
    24d0:	2a e0       	ldi	r18, 0x0A	; 10
    24d2:	26 9f       	mul	r18, r22
    24d4:	11 24       	eor	r1, r1
    24d6:	30 19       	sub	r19, r0
    24d8:	30 5d       	subi	r19, 0xD0	; 208
    24da:	31 93       	st	Z+, r19
    24dc:	de f6       	brtc	.-74     	; 0x2494 <__ultoa_invert+0xe>
    24de:	cf 01       	movw	r24, r30
    24e0:	08 95       	ret
    24e2:	46 2f       	mov	r20, r22
    24e4:	47 70       	andi	r20, 0x07	; 7
    24e6:	40 5d       	subi	r20, 0xD0	; 208
    24e8:	41 93       	st	Z+, r20
    24ea:	b3 e0       	ldi	r27, 0x03	; 3
    24ec:	0f d0       	rcall	.+30     	; 0x250c <__ultoa_invert+0x86>
    24ee:	c9 f7       	brne	.-14     	; 0x24e2 <__ultoa_invert+0x5c>
    24f0:	f6 cf       	rjmp	.-20     	; 0x24de <__ultoa_invert+0x58>
    24f2:	46 2f       	mov	r20, r22
    24f4:	4f 70       	andi	r20, 0x0F	; 15
    24f6:	40 5d       	subi	r20, 0xD0	; 208
    24f8:	4a 33       	cpi	r20, 0x3A	; 58
    24fa:	18 f0       	brcs	.+6      	; 0x2502 <__ultoa_invert+0x7c>
    24fc:	49 5d       	subi	r20, 0xD9	; 217
    24fe:	31 fd       	sbrc	r19, 1
    2500:	40 52       	subi	r20, 0x20	; 32
    2502:	41 93       	st	Z+, r20
    2504:	02 d0       	rcall	.+4      	; 0x250a <__ultoa_invert+0x84>
    2506:	a9 f7       	brne	.-22     	; 0x24f2 <__ultoa_invert+0x6c>
    2508:	ea cf       	rjmp	.-44     	; 0x24de <__ultoa_invert+0x58>
    250a:	b4 e0       	ldi	r27, 0x04	; 4
    250c:	a6 95       	lsr	r26
    250e:	97 95       	ror	r25
    2510:	87 95       	ror	r24
    2512:	77 95       	ror	r23
    2514:	67 95       	ror	r22
    2516:	ba 95       	dec	r27
    2518:	c9 f7       	brne	.-14     	; 0x250c <__ultoa_invert+0x86>
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	61 05       	cpc	r22, r1
    251e:	71 05       	cpc	r23, r1
    2520:	08 95       	ret
    2522:	9b 01       	movw	r18, r22
    2524:	ac 01       	movw	r20, r24
    2526:	0a 2e       	mov	r0, r26
    2528:	06 94       	lsr	r0
    252a:	57 95       	ror	r21
    252c:	47 95       	ror	r20
    252e:	37 95       	ror	r19
    2530:	27 95       	ror	r18
    2532:	ba 95       	dec	r27
    2534:	c9 f7       	brne	.-14     	; 0x2528 <__ultoa_invert+0xa2>
    2536:	62 0f       	add	r22, r18
    2538:	73 1f       	adc	r23, r19
    253a:	84 1f       	adc	r24, r20
    253c:	95 1f       	adc	r25, r21
    253e:	a0 1d       	adc	r26, r0
    2540:	08 95       	ret

00002542 <__prologue_saves__>:
    2542:	2f 92       	push	r2
    2544:	3f 92       	push	r3
    2546:	4f 92       	push	r4
    2548:	5f 92       	push	r5
    254a:	6f 92       	push	r6
    254c:	7f 92       	push	r7
    254e:	8f 92       	push	r8
    2550:	9f 92       	push	r9
    2552:	af 92       	push	r10
    2554:	bf 92       	push	r11
    2556:	cf 92       	push	r12
    2558:	df 92       	push	r13
    255a:	ef 92       	push	r14
    255c:	ff 92       	push	r15
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	cf 93       	push	r28
    2564:	df 93       	push	r29
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	ca 1b       	sub	r28, r26
    256c:	db 0b       	sbc	r29, r27
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	09 94       	ijmp

0000257a <__epilogue_restores__>:
    257a:	2a 88       	ldd	r2, Y+18	; 0x12
    257c:	39 88       	ldd	r3, Y+17	; 0x11
    257e:	48 88       	ldd	r4, Y+16	; 0x10
    2580:	5f 84       	ldd	r5, Y+15	; 0x0f
    2582:	6e 84       	ldd	r6, Y+14	; 0x0e
    2584:	7d 84       	ldd	r7, Y+13	; 0x0d
    2586:	8c 84       	ldd	r8, Y+12	; 0x0c
    2588:	9b 84       	ldd	r9, Y+11	; 0x0b
    258a:	aa 84       	ldd	r10, Y+10	; 0x0a
    258c:	b9 84       	ldd	r11, Y+9	; 0x09
    258e:	c8 84       	ldd	r12, Y+8	; 0x08
    2590:	df 80       	ldd	r13, Y+7	; 0x07
    2592:	ee 80       	ldd	r14, Y+6	; 0x06
    2594:	fd 80       	ldd	r15, Y+5	; 0x05
    2596:	0c 81       	ldd	r16, Y+4	; 0x04
    2598:	1b 81       	ldd	r17, Y+3	; 0x03
    259a:	aa 81       	ldd	r26, Y+2	; 0x02
    259c:	b9 81       	ldd	r27, Y+1	; 0x01
    259e:	ce 0f       	add	r28, r30
    25a0:	d1 1d       	adc	r29, r1
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	ed 01       	movw	r28, r26
    25ae:	08 95       	ret

000025b0 <_exit>:
    25b0:	f8 94       	cli

000025b2 <__stop_program>:
    25b2:	ff cf       	rjmp	.-2      	; 0x25b2 <__stop_program>
